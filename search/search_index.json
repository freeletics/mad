{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modern Android Development - The Freeletics Way \u00b6 At Freeletics use many of the Jetpack/AndroidX libraries but we don\u2019t always use them in the way they are advertised in Google\u2019s tutorials. This project show cases our own flavored version of Modern Android Development as well as some of our own utilities. This repository is a work in progress. More will be added over time. Navigator \u00b6 The navigator library is a wrapper around AndroidX navigation that allows to separate navigation logic from the UI layer and provides a scalable approach to type safe navigation in a highly modularized code base. For more information check out it\u2019s README . implementation 'com.freeletics.mad:navigator:0.3.0' // when using composables for navigation implementation 'com.freeletics.mad:navigator-compose:0.3.0' // when using fragments for navigation (even if these contain composables) implementation 'com.freeletics.mad:navigator-fragment:0.3.0' StateMachine \u00b6 StateMachine is a very simple interface to implement a StateMachine with the concept of emitting state through a StateFlow and receiving input actions to mutate that state. For an example on how to build such a state machine check out FlowRedux . To connect a StateMachine to a user interface you can look at Renderer for the Android View world. In compose the StateMachine can be observed using produceState() and actions can be dispatched to it by simply launching them from a CoroutineScope created with rememberCoroutineScope() . implementation 'com.freeletics.mad:state-machine:0.3.0' TextResource \u00b6 TextResource is a domain specific model to represent text. Abstracts text whether it a localized String sent by the backend, a simple Android string resource (with or without formatting args) or an Android plurals resource. This way business logic with text can be easily tested without requiring Context and running on a device. For more information about the motivation for this abstraction check out this blog post . implementation 'com.freeletics.mad:text-resource:0.3.0' License \u00b6 Copyright 2021 Freeletics GmbH. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Modern Android Development - The Freeletics Way"},{"location":"#modern-android-development-the-freeletics-way","text":"At Freeletics use many of the Jetpack/AndroidX libraries but we don\u2019t always use them in the way they are advertised in Google\u2019s tutorials. This project show cases our own flavored version of Modern Android Development as well as some of our own utilities. This repository is a work in progress. More will be added over time.","title":"Modern Android Development - The Freeletics Way"},{"location":"#navigator","text":"The navigator library is a wrapper around AndroidX navigation that allows to separate navigation logic from the UI layer and provides a scalable approach to type safe navigation in a highly modularized code base. For more information check out it\u2019s README . implementation 'com.freeletics.mad:navigator:0.3.0' // when using composables for navigation implementation 'com.freeletics.mad:navigator-compose:0.3.0' // when using fragments for navigation (even if these contain composables) implementation 'com.freeletics.mad:navigator-fragment:0.3.0'","title":"Navigator"},{"location":"#statemachine","text":"StateMachine is a very simple interface to implement a StateMachine with the concept of emitting state through a StateFlow and receiving input actions to mutate that state. For an example on how to build such a state machine check out FlowRedux . To connect a StateMachine to a user interface you can look at Renderer for the Android View world. In compose the StateMachine can be observed using produceState() and actions can be dispatched to it by simply launching them from a CoroutineScope created with rememberCoroutineScope() . implementation 'com.freeletics.mad:state-machine:0.3.0'","title":"StateMachine"},{"location":"#textresource","text":"TextResource is a domain specific model to represent text. Abstracts text whether it a localized String sent by the backend, a simple Android string resource (with or without formatting args) or an Android plurals resource. This way business logic with text can be easily tested without requiring Context and running on a device. For more information about the motivation for this abstraction check out this blog post . implementation 'com.freeletics.mad:text-resource:0.3.0'","title":"TextResource"},{"location":"#license","text":"Copyright 2021 Freeletics GmbH. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"navigator/","text":"Navigator \u00b6 This library sits on top of AndroidX Navigation and solves 2 problems that we ran into after starting to adopt it. We believe that navigation should be triggered from the business logic. This way it is easily testable in isolation without having to actually navigate inside a running app. However you usually want to keep Android specific components out of these layers and passing NavController there would risk leaking the Activity. The XML based declaration of destinations did not scale well with our heavily modularized code base. Each screen is usually it\u2019s own feature module and those should stay independent of each other. That effectively meant that each XML file had a single destination and you need to define all ids somewhere else so that feature modules can navigate to each other. Since the code generated by safe-args also lives in the feature module it\u2019s not usable by other features either. That meant that in the end we didn\u2019t get the nice type safety advantages of safe-args and the XML was just boilerplate that didn\u2019t form a real graph in the end. Destinations \u00b6 To replace the XML and get type safety for navigation the library has its own concept of destinations. A destination consists of 2 things: - the declaration of the destination itself which determines what is shown when the destination is navigated to; - the route - a way to reach the destination. NavRoute \u00b6 The route part is represented by the NavRoute interface. Each destination will get its own implementation of this interface and screens can use it to navigate to the destination. The most minimal implementation of NavRoute would be for a screen that doesn\u2019t require any arguments can be a simple Kotlin object: @Parcelize object HomeScreenRoute : NavRoute , Parcelable The more common case when a destination needs arguments passed to it would look like this @Parcelize data class DetailScreenRoute ( val id : String , ) : NavRoute , Parcelable Both of these use Parcelable and Parcelize because internally the library will pass the route to the screen itself so that it can access the parameters. NavDestination \u00b6 The other part of the destination is represented by NavDestination . These work slightly differently based on whether you are using Fragment navigation or pure Compose navigation (a Fragment with composables in it would still count as Fragment navigation). Compose \u00b6 If we take the DetailScreenRoute example from above, declaring the destination for it would look like this val detailScreenDestination : NavDestination = screenDestination < DetailScreenRoute > { route : DetailScreenRoute -> DetailScreen ( route ) } The screenDestination function will return a new NavDestination which is linked to the route that was passed as the generic type parameter. The lambda function then gets an instance of that NavRoute and calls the @Composable function that should be shown. The other 2 functions to create destinations are dialogDestination and bottomSheetDestination - they declare destinations that use a dialog or bottom sheet as a container instead of being shown full screen. These destinations can then be passed to a NavHost by putting them into a set: setContent { NavHost ( startRoute = HomeScreenRoute , // route to the screen that should be shown initially destinations = setOf ( homeDestination , detailScreenDestination ) ) } Fragment \u00b6 The approach for Fragments is very similar val detailScreenDestination : NavDestination = screenDestination < DetailScreenRoute , DetailFragment > () The screenDestination function will return a new NavDestination which is linked to the route that was passed as the first generic type parameter. The second type parameter is the Fragment that will be shown for this destination. Like the compose destination functions there is also dialogDestination to have a DialogFragment destination. bottomSheetDestination does not exist because this would simply be a dialogDestination with a BottomSheetDialogFragment . These destinations can then be passed to a NavHostFragment by putting them into a set: navHostFragment . setGraph ( startRoute = HomeScreenRoute , // route to the screen that should be shown initially destinations = setOf ( homeDestination , detailScreenDestination ) ) Inside a Fragment the requireRoute extension method can be used to obtain the NavRoute used to navigate to it. For example the DetailFragment could do this to obtain DetailScreenRoute and access the id in it: val route = requireRoute < DetailScreenRoute > () Scalability \u00b6 For the simplicity of the examples above the destinations were just kept in a variable and the set was created directly calling NavHost / setGraph . In practice it makes more sense to use dagger multibindings for these: @Module object DetailScreenModule { @Provides @IntoSet fun provideDetailScreenDestinations (): NavDestination = screenDestination < DetailScreenRoute > { DetailScreen ( it ) } } Then an Activity or something else can simply inject a Set<NavDestination> class MainActivity : ComponentActivity () { @Inject lateinit var destinations : Set < NavDestination > override fun onCreate ( savedInstanceState : Bundle ) { super . onCreate () // inject the activity setContent { NavHost ( startRoute = HomeScreenRoute , destinations = destinations ) } } } Nav events \u00b6 The third main class that the library provides is NavEventNavigator . This class solves the first of our 2 problems, triggering navigation from outside the UI layer. For that it has all the primitive navigation operations: // navigate to the destination that the given route leads to navigator . navigateTo ( DetailScreenRoute ( \"some-id\" )) // navigate up in the hierarchy navigator . navigateUp () // navigate to the previous destination in the backstack navigator . navigateBack () // navigate back to the destination belonging to the referenced route and remove all destinations // in between from the back stack, depending on inclusive the destination navigator . navigateBackTo < MainScreenRoute > ( inclusive = false ) These methods can be called from anywhere and it\u2019s safe to hold an instance of the NavEventNavigator in places where it survives configuration changes. For the navigation to actually be executed call handleNavigation(this, navigator) from your one of the Fragment lifecycle methods or NavigationSetup(navigator) from a composable function. It\u2019s possible to simply instantiate an instance of NavEventNavigator but in the Freeletics code base we usually create a subclass in each feature module that has some higher level methods. For example it could have a method that encapsulates the creation of the route: fun navigateToDetail ( id : String ) { navigateTo ( DetailScreenRoute ( id )) } They can also contain more complex logic like navigating to one route or another based on a parameter or first calling navigateBackTo and then navigateTo with a new route. This keeps the navigation logic more separated and it can be easily called from more than one place. Other concepts \u00b6 Multiple back stacks \u00b6 The library provides support for AndroidX Navigation\u2019s multi back stack feature. To use the feature the root of a back stack should use NavRoot instead of NavRoute for it\u2019s route class. Then it\u2019s possible to navigate to the backstack using NavEventNavigator.navigateToRoot(ProfileTabRoot, restoreRootState = false) . This will save the current back stack\u2019s state, clear it and then do one of two things based on the restoreRootState parameter. If it is true and there is one it will restore the back stack that is associated with ProfileTabRoot . If it\u2019s false or there is no matching back stack that was previously saved the destination for ProfileTabRoot will be shown. Handling back clicks \u00b6 NavEventNavigator has a backPresses() method that returns Flow<Unit> which will emit whenever Android\u2019s back button is used. While this Flow is collected the default back handling is disabled. This can be used to for example show a confirmation dialog before navigating back. Activity results \u00b6 External SDKs and the framework often provide an Activity that is supposed to be used with startActivityForResult . AndroidX already introduced ActivityResultContract to simplify handling this and NavEventNavigator uses them to also enable starting them from outside the UI layer and receiving results there. To use the API registerForActivityResult needs to be called with an instance of the wanted ActivityResultContract . This needs to happen before handleNavigation / NavigationSetup is called for the navigator, so it is recommended to do this during the construction of the navigator. The method returns an ActivityResultRequest object that can be then used for two things. It can be passed to navigateForResult(request) to launch the contract. It also has a results property that returns a Flow<O> , where O is the contract\u2019s output type, to make it possible to receive the returned results. This is an example navigator that allow navigating to the camera or the system file picker to take or pick an image: class MyNavigator : NavEventNavigator () { val cameraImageRequest = registerForActivityResult ( ActivityResultContracts . TakePicture ()) val galleryImageRequest = registerForActivityResult ( ActivityResultContracts . GetContent ()) fun takePicture ( uri : Uri ) { // the uri here is the parameter that the TakePicture contract expects navigateForResult ( cameraImageRequest , uri ) } fun pickPicture () { navigateForResult ( galleryImageRequest , \"image/*\" ) } } In the example above cameraImageRequest.results returns a Flow<Boolean> and galleryImageRequest.results a Flow<Uri?> which can both be collected to handle the results. Requesting permissions \u00b6 The Activity result APIs can already be used with ActivityResultContracts.RequestPermission or ActivityResultContracts.RequestMultiplePermissions to also handle requesting Android runtime permission requests. NavEventNavigator provides a slightly higher level API for this. To use this call registerForPermissionResult , which should be done during the construction of the navigator or shortly after. This can then be passed to requestPermissions with one or more permission to request to launch the request. Results can be collected through the Flow<Map<String, PermissionResult>> that is returned by the results property of request. The PermissionResult is the main advantage of using the API instead for the Activity result APIs. Instead of being a simple Boolean for granted/denied it is an enum with GRANTED , DENIED and DENIED_PERMANENTLY . After it receives the result from the contract, the library will internally use Activity.shouldShowRequestPermissionRationale(permission) to figure out if a denial was a permanent, meaning the user won\u2019t be asked again, or not. This is usually not easily possible since it requires a reference to an Activity . An example usage can look like this: class MyNavigator : NavEventNavigator () { // use permissionRequest.results somewhere to handle results val permissionRequest = registerForPermissionsResult () fun requestContactsPermission ( uri : Uri ) { requestPermissions ( permissionRequest , Manifest . permission . CAMERA ) } fun requestLocationPermissions () { requestPermissions ( permissionRequest , Manifest . permission . ACCESS_FINE_LOCATION , Manifest . permission . ACCESS_FINE_LOCATION , ) } } Destination results \u00b6 The last result API of the library is for returning hand handling results from screens inside the app that also use NavEventNavigator . The setup is similar to Activity results and permissions. The registerForNavigationResult<Route, Result> needs to be called during construction of the navigator or shortly after. Route in this case should be the NavRoute class for the curren screen. While Result is the type of the expected result which can be any Parcelable class. The register method will like the others than return a request object, which has results property that returns a Flow<Result> to collect the results. The navigation to the screen from which the result should be returned is a regular call to navigateTo . However the NavRoute class for that target destination should have NavigationResultRequest.Key<Result> as a parameter. An instance of such a Key can be obtained from the key property of the request object. The target screen can then simply call devliverNavigationResult(route.key, result) on its own navigator to send the result and afterwards remove itself from the back stack with navigateBack . The navigator for a hypothetical ScreenA that wants to receive a result from ScreenB would look like this data class MessageResult ( val message : String ): Parcelable class ScreenANavigator : NavEventNavigator () { // use request.results somewhere to handle the results that ScreenB delivers val request = registerForNavigationResult < ScreenARoute , MessageResult > fun navigateToScreenB () { // if needed ScreenBRoute could also have additional parameters navigateTo ( ScreenBRoute ( request . key )) } } And then the navigator for ScreenB class ScreenANavigator ( val route : ScreenBRoute ) : NavEventNavigator () { fun deliverMessage ( message : String ) { deliverNavigationResult ( route . key , MessageResult ( message )) } } Testing \u00b6 The NavEventNavigator exposes a navEvents property that has Flow<NavEvent> as type. On any of the navigation calls this Flow will emit a new NavEvent . To test logic that triggers navigation this can be used together with the Turbine library to assert that the correct events are emitted. navigator . navEvents . test { navigator . navigateTo ( TestRoute ()) assertThat ( awaitItem ). isEqualTo ( NavEvent . NavigateToEvent ( TestRoute ())) navigator . navigateBack () assertThat ( awaitItem ). isEqualTo ( NavEvent . BackEvent ) } This is a very simplified example, in reality the test would most likely not call the navigator itself but some other code that uses the navigator internally.","title":"Navigator"},{"location":"navigator/#navigator","text":"This library sits on top of AndroidX Navigation and solves 2 problems that we ran into after starting to adopt it. We believe that navigation should be triggered from the business logic. This way it is easily testable in isolation without having to actually navigate inside a running app. However you usually want to keep Android specific components out of these layers and passing NavController there would risk leaking the Activity. The XML based declaration of destinations did not scale well with our heavily modularized code base. Each screen is usually it\u2019s own feature module and those should stay independent of each other. That effectively meant that each XML file had a single destination and you need to define all ids somewhere else so that feature modules can navigate to each other. Since the code generated by safe-args also lives in the feature module it\u2019s not usable by other features either. That meant that in the end we didn\u2019t get the nice type safety advantages of safe-args and the XML was just boilerplate that didn\u2019t form a real graph in the end.","title":"Navigator"},{"location":"navigator/#destinations","text":"To replace the XML and get type safety for navigation the library has its own concept of destinations. A destination consists of 2 things: - the declaration of the destination itself which determines what is shown when the destination is navigated to; - the route - a way to reach the destination.","title":"Destinations"},{"location":"navigator/#navroute","text":"The route part is represented by the NavRoute interface. Each destination will get its own implementation of this interface and screens can use it to navigate to the destination. The most minimal implementation of NavRoute would be for a screen that doesn\u2019t require any arguments can be a simple Kotlin object: @Parcelize object HomeScreenRoute : NavRoute , Parcelable The more common case when a destination needs arguments passed to it would look like this @Parcelize data class DetailScreenRoute ( val id : String , ) : NavRoute , Parcelable Both of these use Parcelable and Parcelize because internally the library will pass the route to the screen itself so that it can access the parameters.","title":"NavRoute"},{"location":"navigator/#navdestination","text":"The other part of the destination is represented by NavDestination . These work slightly differently based on whether you are using Fragment navigation or pure Compose navigation (a Fragment with composables in it would still count as Fragment navigation).","title":"NavDestination"},{"location":"navigator/#compose","text":"If we take the DetailScreenRoute example from above, declaring the destination for it would look like this val detailScreenDestination : NavDestination = screenDestination < DetailScreenRoute > { route : DetailScreenRoute -> DetailScreen ( route ) } The screenDestination function will return a new NavDestination which is linked to the route that was passed as the generic type parameter. The lambda function then gets an instance of that NavRoute and calls the @Composable function that should be shown. The other 2 functions to create destinations are dialogDestination and bottomSheetDestination - they declare destinations that use a dialog or bottom sheet as a container instead of being shown full screen. These destinations can then be passed to a NavHost by putting them into a set: setContent { NavHost ( startRoute = HomeScreenRoute , // route to the screen that should be shown initially destinations = setOf ( homeDestination , detailScreenDestination ) ) }","title":"Compose"},{"location":"navigator/#fragment","text":"The approach for Fragments is very similar val detailScreenDestination : NavDestination = screenDestination < DetailScreenRoute , DetailFragment > () The screenDestination function will return a new NavDestination which is linked to the route that was passed as the first generic type parameter. The second type parameter is the Fragment that will be shown for this destination. Like the compose destination functions there is also dialogDestination to have a DialogFragment destination. bottomSheetDestination does not exist because this would simply be a dialogDestination with a BottomSheetDialogFragment . These destinations can then be passed to a NavHostFragment by putting them into a set: navHostFragment . setGraph ( startRoute = HomeScreenRoute , // route to the screen that should be shown initially destinations = setOf ( homeDestination , detailScreenDestination ) ) Inside a Fragment the requireRoute extension method can be used to obtain the NavRoute used to navigate to it. For example the DetailFragment could do this to obtain DetailScreenRoute and access the id in it: val route = requireRoute < DetailScreenRoute > ()","title":"Fragment"},{"location":"navigator/#scalability","text":"For the simplicity of the examples above the destinations were just kept in a variable and the set was created directly calling NavHost / setGraph . In practice it makes more sense to use dagger multibindings for these: @Module object DetailScreenModule { @Provides @IntoSet fun provideDetailScreenDestinations (): NavDestination = screenDestination < DetailScreenRoute > { DetailScreen ( it ) } } Then an Activity or something else can simply inject a Set<NavDestination> class MainActivity : ComponentActivity () { @Inject lateinit var destinations : Set < NavDestination > override fun onCreate ( savedInstanceState : Bundle ) { super . onCreate () // inject the activity setContent { NavHost ( startRoute = HomeScreenRoute , destinations = destinations ) } } }","title":"Scalability"},{"location":"navigator/#nav-events","text":"The third main class that the library provides is NavEventNavigator . This class solves the first of our 2 problems, triggering navigation from outside the UI layer. For that it has all the primitive navigation operations: // navigate to the destination that the given route leads to navigator . navigateTo ( DetailScreenRoute ( \"some-id\" )) // navigate up in the hierarchy navigator . navigateUp () // navigate to the previous destination in the backstack navigator . navigateBack () // navigate back to the destination belonging to the referenced route and remove all destinations // in between from the back stack, depending on inclusive the destination navigator . navigateBackTo < MainScreenRoute > ( inclusive = false ) These methods can be called from anywhere and it\u2019s safe to hold an instance of the NavEventNavigator in places where it survives configuration changes. For the navigation to actually be executed call handleNavigation(this, navigator) from your one of the Fragment lifecycle methods or NavigationSetup(navigator) from a composable function. It\u2019s possible to simply instantiate an instance of NavEventNavigator but in the Freeletics code base we usually create a subclass in each feature module that has some higher level methods. For example it could have a method that encapsulates the creation of the route: fun navigateToDetail ( id : String ) { navigateTo ( DetailScreenRoute ( id )) } They can also contain more complex logic like navigating to one route or another based on a parameter or first calling navigateBackTo and then navigateTo with a new route. This keeps the navigation logic more separated and it can be easily called from more than one place.","title":"Nav events"},{"location":"navigator/#other-concepts","text":"","title":"Other concepts"},{"location":"navigator/#multiple-back-stacks","text":"The library provides support for AndroidX Navigation\u2019s multi back stack feature. To use the feature the root of a back stack should use NavRoot instead of NavRoute for it\u2019s route class. Then it\u2019s possible to navigate to the backstack using NavEventNavigator.navigateToRoot(ProfileTabRoot, restoreRootState = false) . This will save the current back stack\u2019s state, clear it and then do one of two things based on the restoreRootState parameter. If it is true and there is one it will restore the back stack that is associated with ProfileTabRoot . If it\u2019s false or there is no matching back stack that was previously saved the destination for ProfileTabRoot will be shown.","title":"Multiple back stacks"},{"location":"navigator/#handling-back-clicks","text":"NavEventNavigator has a backPresses() method that returns Flow<Unit> which will emit whenever Android\u2019s back button is used. While this Flow is collected the default back handling is disabled. This can be used to for example show a confirmation dialog before navigating back.","title":"Handling back clicks"},{"location":"navigator/#activity-results","text":"External SDKs and the framework often provide an Activity that is supposed to be used with startActivityForResult . AndroidX already introduced ActivityResultContract to simplify handling this and NavEventNavigator uses them to also enable starting them from outside the UI layer and receiving results there. To use the API registerForActivityResult needs to be called with an instance of the wanted ActivityResultContract . This needs to happen before handleNavigation / NavigationSetup is called for the navigator, so it is recommended to do this during the construction of the navigator. The method returns an ActivityResultRequest object that can be then used for two things. It can be passed to navigateForResult(request) to launch the contract. It also has a results property that returns a Flow<O> , where O is the contract\u2019s output type, to make it possible to receive the returned results. This is an example navigator that allow navigating to the camera or the system file picker to take or pick an image: class MyNavigator : NavEventNavigator () { val cameraImageRequest = registerForActivityResult ( ActivityResultContracts . TakePicture ()) val galleryImageRequest = registerForActivityResult ( ActivityResultContracts . GetContent ()) fun takePicture ( uri : Uri ) { // the uri here is the parameter that the TakePicture contract expects navigateForResult ( cameraImageRequest , uri ) } fun pickPicture () { navigateForResult ( galleryImageRequest , \"image/*\" ) } } In the example above cameraImageRequest.results returns a Flow<Boolean> and galleryImageRequest.results a Flow<Uri?> which can both be collected to handle the results.","title":"Activity results"},{"location":"navigator/#requesting-permissions","text":"The Activity result APIs can already be used with ActivityResultContracts.RequestPermission or ActivityResultContracts.RequestMultiplePermissions to also handle requesting Android runtime permission requests. NavEventNavigator provides a slightly higher level API for this. To use this call registerForPermissionResult , which should be done during the construction of the navigator or shortly after. This can then be passed to requestPermissions with one or more permission to request to launch the request. Results can be collected through the Flow<Map<String, PermissionResult>> that is returned by the results property of request. The PermissionResult is the main advantage of using the API instead for the Activity result APIs. Instead of being a simple Boolean for granted/denied it is an enum with GRANTED , DENIED and DENIED_PERMANENTLY . After it receives the result from the contract, the library will internally use Activity.shouldShowRequestPermissionRationale(permission) to figure out if a denial was a permanent, meaning the user won\u2019t be asked again, or not. This is usually not easily possible since it requires a reference to an Activity . An example usage can look like this: class MyNavigator : NavEventNavigator () { // use permissionRequest.results somewhere to handle results val permissionRequest = registerForPermissionsResult () fun requestContactsPermission ( uri : Uri ) { requestPermissions ( permissionRequest , Manifest . permission . CAMERA ) } fun requestLocationPermissions () { requestPermissions ( permissionRequest , Manifest . permission . ACCESS_FINE_LOCATION , Manifest . permission . ACCESS_FINE_LOCATION , ) } }","title":"Requesting permissions"},{"location":"navigator/#destination-results","text":"The last result API of the library is for returning hand handling results from screens inside the app that also use NavEventNavigator . The setup is similar to Activity results and permissions. The registerForNavigationResult<Route, Result> needs to be called during construction of the navigator or shortly after. Route in this case should be the NavRoute class for the curren screen. While Result is the type of the expected result which can be any Parcelable class. The register method will like the others than return a request object, which has results property that returns a Flow<Result> to collect the results. The navigation to the screen from which the result should be returned is a regular call to navigateTo . However the NavRoute class for that target destination should have NavigationResultRequest.Key<Result> as a parameter. An instance of such a Key can be obtained from the key property of the request object. The target screen can then simply call devliverNavigationResult(route.key, result) on its own navigator to send the result and afterwards remove itself from the back stack with navigateBack . The navigator for a hypothetical ScreenA that wants to receive a result from ScreenB would look like this data class MessageResult ( val message : String ): Parcelable class ScreenANavigator : NavEventNavigator () { // use request.results somewhere to handle the results that ScreenB delivers val request = registerForNavigationResult < ScreenARoute , MessageResult > fun navigateToScreenB () { // if needed ScreenBRoute could also have additional parameters navigateTo ( ScreenBRoute ( request . key )) } } And then the navigator for ScreenB class ScreenANavigator ( val route : ScreenBRoute ) : NavEventNavigator () { fun deliverMessage ( message : String ) { deliverNavigationResult ( route . key , MessageResult ( message )) } }","title":"Destination results"},{"location":"navigator/#testing","text":"The NavEventNavigator exposes a navEvents property that has Flow<NavEvent> as type. On any of the navigation calls this Flow will emit a new NavEvent . To test logic that triggers navigation this can be used together with the Turbine library to assert that the correct events are emitted. navigator . navEvents . test { navigator . navigateTo ( TestRoute ()) assertThat ( awaitItem ). isEqualTo ( NavEvent . NavigateToEvent ( TestRoute ())) navigator . navigateBack () assertThat ( awaitItem ). isEqualTo ( NavEvent . BackEvent ) } This is a very simplified example, in reality the test would most likely not call the navigator itself but some other code that uses the navigator internally.","title":"Testing"},{"location":"Javadoc/navigator/","text":"// navigator-runtime navigator-runtime \u00b6 Packages \u00b6 Name com.freeletics.mad.navigator com.freeletics.mad.navigator.internal","title":"Index"},{"location":"Javadoc/navigator/#navigator-runtime","text":"","title":"navigator-runtime"},{"location":"Javadoc/navigator/#packages","text":"Name com.freeletics.mad.navigator com.freeletics.mad.navigator.internal","title":"Packages"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/","text":"// navigator-runtime / com.freeletics.mad.navigator Package com.freeletics.mad.navigator \u00b6 Types \u00b6 Name Summary ActivityResultRequest [androidJvm] class ActivityResultRequest < I , O > : ResultOwner < O > Class returned from NavEventNavigator.registerForActivityResult. BaseRoute [androidJvm] interface BaseRoute NavEvent [androidJvm] interface NavEvent Represents a navigation event that is being sent by a NavEventNavigator and handled by a NavEventNavigationHandler implementation. Default implementations of such a handler are provided in separate artifacts. NavEventNavigator [androidJvm] open class NavEventNavigator A navigator that allows to fire events through it\u2019s methods. These events are publicly exposed through the navEvents that can be collected and acted upon by a NavigationHandler. This allows to trigger navigation actions from outside the view layer without keeping references to Android framework classes that might leak. It also improves the testability of your navigation logic since it is possible to just write test that the correct events were emitted. NavigationResultRequest [androidJvm] class NavigationResultRequest < O : Parcelable > : ResultOwner < O > Class that exposes a results that can be used to observe results for the given key . NavRoot [androidJvm] interface NavRoot : BaseRoute This is similar to a NavRoute but represents the route to the start destination used in a backstack. When you navigate to a NavRoot the current backstack is saved and removed so that the NavRoot is right on top of the start destination. NavRoute [androidJvm] interface NavRoute : BaseRoute Represents the route to a destination. PermissionsResultRequest [androidJvm] class PermissionsResultRequest : ResultOwner < Map < String , PermissionsResultRequest.PermissionResult >> Class returned from NavEventNavigator.registerForPermissionsResult. ResultOwner [androidJvm] sealed class ResultOwner < O > A base class for anything that exposes a Flow of results . Results will only be delivered to one collector at a time.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/#package-comfreeleticsmadnavigator","text":"","title":"Package com.freeletics.mad.navigator"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/#types","text":"Name Summary ActivityResultRequest [androidJvm] class ActivityResultRequest < I , O > : ResultOwner < O > Class returned from NavEventNavigator.registerForActivityResult. BaseRoute [androidJvm] interface BaseRoute NavEvent [androidJvm] interface NavEvent Represents a navigation event that is being sent by a NavEventNavigator and handled by a NavEventNavigationHandler implementation. Default implementations of such a handler are provided in separate artifacts. NavEventNavigator [androidJvm] open class NavEventNavigator A navigator that allows to fire events through it\u2019s methods. These events are publicly exposed through the navEvents that can be collected and acted upon by a NavigationHandler. This allows to trigger navigation actions from outside the view layer without keeping references to Android framework classes that might leak. It also improves the testability of your navigation logic since it is possible to just write test that the correct events were emitted. NavigationResultRequest [androidJvm] class NavigationResultRequest < O : Parcelable > : ResultOwner < O > Class that exposes a results that can be used to observe results for the given key . NavRoot [androidJvm] interface NavRoot : BaseRoute This is similar to a NavRoute but represents the route to the start destination used in a backstack. When you navigate to a NavRoot the current backstack is saved and removed so that the NavRoot is right on top of the start destination. NavRoute [androidJvm] interface NavRoute : BaseRoute Represents the route to a destination. PermissionsResultRequest [androidJvm] class PermissionsResultRequest : ResultOwner < Map < String , PermissionsResultRequest.PermissionResult >> Class returned from NavEventNavigator.registerForPermissionsResult. ResultOwner [androidJvm] sealed class ResultOwner < O > A base class for anything that exposes a Flow of results . Results will only be delivered to one collector at a time.","title":"Types"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/","text":"// navigator-runtime / com.freeletics.mad.navigator / ActivityResultRequest ActivityResultRequest \u00b6 [androidJvm]\\ class ActivityResultRequest < I , O > : ResultOwner < O > Class returned from NavEventNavigator.registerForActivityResult. This class has two purposes: It exposes a resultsFlow that can be used to observe incoming results It can be passed to NavEventNavigator.navigateForResult to trigger the execution of a result request Functions \u00b6 Name Summary handleResult [androidJvm] fun handleResult (result: O ) onResult [androidJvm] fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler. Properties \u00b6 Name Summary contract [androidJvm] val contract : ActivityResultContract < I , O > results [androidJvm] val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/#activityresultrequest","text":"[androidJvm]\\ class ActivityResultRequest < I , O > : ResultOwner < O > Class returned from NavEventNavigator.registerForActivityResult. This class has two purposes: It exposes a resultsFlow that can be used to observe incoming results It can be passed to NavEventNavigator.navigateForResult to trigger the execution of a result request","title":"ActivityResultRequest"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/#functions","text":"Name Summary handleResult [androidJvm] fun handleResult (result: O ) onResult [androidJvm] fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler.","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/#properties","text":"Name Summary contract [androidJvm] val contract : ActivityResultContract < I , O > results [androidJvm] val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/contract/","text":"// navigator-runtime / com.freeletics.mad.navigator / ActivityResultRequest / contract contract \u00b6 [androidJvm]\\ val contract : ActivityResultContract < I , O >","title":"Contract"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/contract/#contract","text":"[androidJvm]\\ val contract : ActivityResultContract < I , O >","title":"contract"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/handle-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / ActivityResultRequest / handleResult handleResult \u00b6 [androidJvm]\\ fun handleResult (result: O )","title":"Handle result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-activity-result-request/handle-result/#handleresult","text":"[androidJvm]\\ fun handleResult (result: O )","title":"handleResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-base-route/","text":"// navigator-runtime / com.freeletics.mad.navigator / BaseRoute BaseRoute \u00b6 [androidJvm]\\ interface BaseRoute Inheritors \u00b6 Name NavRoute NavRoot Extensions \u00b6 Name Summary destinationId [androidJvm] fun BaseRoute . destinationId (): Int getArguments [androidJvm] fun BaseRoute . getArguments (): Bundle","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-base-route/#baseroute","text":"[androidJvm]\\ interface BaseRoute","title":"BaseRoute"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-base-route/#inheritors","text":"Name NavRoute NavRoot","title":"Inheritors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-base-route/#extensions","text":"Name Summary destinationId [androidJvm] fun BaseRoute . destinationId (): Int getArguments [androidJvm] fun BaseRoute . getArguments (): Bundle","title":"Extensions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent NavEvent \u00b6 [androidJvm]\\ interface NavEvent Represents a navigation event that is being sent by a NavEventNavigator and handled by a NavEventNavigationHandler implementation. Default implementations of such a handler are provided in separate artifacts. Custom subclasses of NavEvent can be sent using NavEventNavigator.sendNavEvent but require providing a custom NavEventNavigationHandler that supports handling those events. Types \u00b6 Name Summary ActivityResultEvent [androidJvm] data class ActivityResultEvent < I >(request: ActivityResultRequest < I , *>, input: I ) : NavEvent Launches the request to retrieve an event. BackEvent [androidJvm] object BackEvent : NavEvent Navigates back. BackToEvent [androidJvm] data class BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean ) : NavEvent Navigates back to the given popUpTo. If inclusive is true the destination itself will also be popped of the back stack. DestinationResultEvent [androidJvm] data class DestinationResultEvent < O : Parcelable >(key: NavigationResultRequest.Key < O >, result: O ) : NavEvent Delivers the result to the destination that created key. NavigateToEvent [androidJvm] data class NavigateToEvent (route: NavRoute ) : NavEvent Navigates to the given route. NavigateToRootEvent [androidJvm] data class NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean ) : NavEvent Navigates to the given root. The current back stack will be popped and saved. Whether the backstack of the given route is restored depends on restoreRootState. PermissionsResultEvent [androidJvm] data class PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >) : NavEvent Launches the request to retrieve an event. UpEvent [androidJvm] object UpEvent : NavEvent Navigates up. Inheritors \u00b6 Name NavigateToEvent NavigateToRootEvent UpEvent BackEvent BackToEvent ActivityResultEvent PermissionsResultEvent DestinationResultEvent","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/#navevent","text":"[androidJvm]\\ interface NavEvent Represents a navigation event that is being sent by a NavEventNavigator and handled by a NavEventNavigationHandler implementation. Default implementations of such a handler are provided in separate artifacts. Custom subclasses of NavEvent can be sent using NavEventNavigator.sendNavEvent but require providing a custom NavEventNavigationHandler that supports handling those events.","title":"NavEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/#types","text":"Name Summary ActivityResultEvent [androidJvm] data class ActivityResultEvent < I >(request: ActivityResultRequest < I , *>, input: I ) : NavEvent Launches the request to retrieve an event. BackEvent [androidJvm] object BackEvent : NavEvent Navigates back. BackToEvent [androidJvm] data class BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean ) : NavEvent Navigates back to the given popUpTo. If inclusive is true the destination itself will also be popped of the back stack. DestinationResultEvent [androidJvm] data class DestinationResultEvent < O : Parcelable >(key: NavigationResultRequest.Key < O >, result: O ) : NavEvent Delivers the result to the destination that created key. NavigateToEvent [androidJvm] data class NavigateToEvent (route: NavRoute ) : NavEvent Navigates to the given route. NavigateToRootEvent [androidJvm] data class NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean ) : NavEvent Navigates to the given root. The current back stack will be popped and saved. Whether the backstack of the given route is restored depends on restoreRootState. PermissionsResultEvent [androidJvm] data class PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >) : NavEvent Launches the request to retrieve an event. UpEvent [androidJvm] object UpEvent : NavEvent Navigates up.","title":"Types"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/#inheritors","text":"Name NavigateToEvent NavigateToRootEvent UpEvent BackEvent BackToEvent ActivityResultEvent PermissionsResultEvent DestinationResultEvent","title":"Inheritors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-activity-result-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / ActivityResultEvent ActivityResultEvent \u00b6 [androidJvm]\\ data class ActivityResultEvent < I >(request: ActivityResultRequest < I , *>, input: I ) : NavEvent Launches the request to retrieve an event. Constructors \u00b6 ActivityResultEvent [androidJvm] fun < I > ActivityResultEvent (request: ActivityResultRequest < I , *>, input: I )","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-activity-result-event/#activityresultevent","text":"[androidJvm]\\ data class ActivityResultEvent < I >(request: ActivityResultRequest < I , *>, input: I ) : NavEvent Launches the request to retrieve an event.","title":"ActivityResultEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-activity-result-event/#constructors","text":"ActivityResultEvent [androidJvm] fun < I > ActivityResultEvent (request: ActivityResultRequest < I , *>, input: I )","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-activity-result-event/-activity-result-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / ActivityResultEvent / ActivityResultEvent ActivityResultEvent \u00b6 [androidJvm]\\ fun < I > ActivityResultEvent (request: ActivityResultRequest < I , *>, input: I )","title":" activity result event"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-activity-result-event/-activity-result-event/#activityresultevent","text":"[androidJvm]\\ fun < I > ActivityResultEvent (request: ActivityResultRequest < I , *>, input: I )","title":"ActivityResultEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / BackEvent BackEvent \u00b6 [androidJvm]\\ object BackEvent : NavEvent Navigates back.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-event/#backevent","text":"[androidJvm]\\ object BackEvent : NavEvent Navigates back.","title":"BackEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-to-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / BackToEvent BackToEvent \u00b6 [androidJvm]\\ data class BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean ) : NavEvent Navigates back to the given popUpTo. If inclusive is true the destination itself will also be popped of the back stack. Constructors \u00b6 BackToEvent [androidJvm] fun BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean )","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-to-event/#backtoevent","text":"[androidJvm]\\ data class BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean ) : NavEvent Navigates back to the given popUpTo. If inclusive is true the destination itself will also be popped of the back stack.","title":"BackToEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-to-event/#constructors","text":"BackToEvent [androidJvm] fun BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean )","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-to-event/-back-to-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / BackToEvent / BackToEvent BackToEvent \u00b6 [androidJvm]\\ fun BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean )","title":" back to event"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-back-to-event/-back-to-event/#backtoevent","text":"[androidJvm]\\ fun BackToEvent (popUpTo: KClass <out BaseRoute >, inclusive: Boolean )","title":"BackToEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-destination-result-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / DestinationResultEvent DestinationResultEvent \u00b6 [androidJvm]\\ data class DestinationResultEvent < O : Parcelable >(key: NavigationResultRequest.Key < O >, result: O ) : NavEvent Delivers the result to the destination that created key. Constructors \u00b6 DestinationResultEvent [androidJvm] fun < O : Parcelable > DestinationResultEvent (key: NavigationResultRequest.Key < O >, result: O )","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-destination-result-event/#destinationresultevent","text":"[androidJvm]\\ data class DestinationResultEvent < O : Parcelable >(key: NavigationResultRequest.Key < O >, result: O ) : NavEvent Delivers the result to the destination that created key.","title":"DestinationResultEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-destination-result-event/#constructors","text":"DestinationResultEvent [androidJvm] fun < O : Parcelable > DestinationResultEvent (key: NavigationResultRequest.Key < O >, result: O )","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-destination-result-event/-destination-result-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / DestinationResultEvent / DestinationResultEvent DestinationResultEvent \u00b6 [androidJvm]\\ fun < O : Parcelable > DestinationResultEvent (key: NavigationResultRequest.Key < O >, result: O )","title":" destination result event"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-destination-result-event/-destination-result-event/#destinationresultevent","text":"[androidJvm]\\ fun < O : Parcelable > DestinationResultEvent (key: NavigationResultRequest.Key < O >, result: O )","title":"DestinationResultEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / NavigateToEvent NavigateToEvent \u00b6 [androidJvm]\\ data class NavigateToEvent (route: NavRoute ) : NavEvent Navigates to the given route. Constructors \u00b6 NavigateToEvent [androidJvm] fun NavigateToEvent (route: NavRoute )","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-event/#navigatetoevent","text":"[androidJvm]\\ data class NavigateToEvent (route: NavRoute ) : NavEvent Navigates to the given route.","title":"NavigateToEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-event/#constructors","text":"NavigateToEvent [androidJvm] fun NavigateToEvent (route: NavRoute )","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-event/-navigate-to-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / NavigateToEvent / NavigateToEvent NavigateToEvent \u00b6 [androidJvm]\\ fun NavigateToEvent (route: NavRoute )","title":" navigate to event"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-event/-navigate-to-event/#navigatetoevent","text":"[androidJvm]\\ fun NavigateToEvent (route: NavRoute )","title":"NavigateToEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-root-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / NavigateToRootEvent NavigateToRootEvent \u00b6 [androidJvm]\\ data class NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean ) : NavEvent Navigates to the given root. The current back stack will be popped and saved. Whether the backstack of the given route is restored depends on restoreRootState. Constructors \u00b6 NavigateToRootEvent [androidJvm] fun NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean )","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-root-event/#navigatetorootevent","text":"[androidJvm]\\ data class NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean ) : NavEvent Navigates to the given root. The current back stack will be popped and saved. Whether the backstack of the given route is restored depends on restoreRootState.","title":"NavigateToRootEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-root-event/#constructors","text":"NavigateToRootEvent [androidJvm] fun NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean )","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-root-event/-navigate-to-root-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / NavigateToRootEvent / NavigateToRootEvent NavigateToRootEvent \u00b6 [androidJvm]\\ fun NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean )","title":" navigate to root event"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-navigate-to-root-event/-navigate-to-root-event/#navigatetorootevent","text":"[androidJvm]\\ fun NavigateToRootEvent (root: NavRoot , restoreRootState: Boolean )","title":"NavigateToRootEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-permissions-result-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / PermissionsResultEvent PermissionsResultEvent \u00b6 [androidJvm]\\ data class PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >) : NavEvent Launches the request to retrieve an event. Constructors \u00b6 PermissionsResultEvent [androidJvm] fun PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >)","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-permissions-result-event/#permissionsresultevent","text":"[androidJvm]\\ data class PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >) : NavEvent Launches the request to retrieve an event.","title":"PermissionsResultEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-permissions-result-event/#constructors","text":"PermissionsResultEvent [androidJvm] fun PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >)","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-permissions-result-event/-permissions-result-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / PermissionsResultEvent / PermissionsResultEvent PermissionsResultEvent \u00b6 [androidJvm]\\ fun PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >)","title":" permissions result event"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-permissions-result-event/-permissions-result-event/#permissionsresultevent","text":"[androidJvm]\\ fun PermissionsResultEvent (request: PermissionsResultRequest , permissions: List < String >)","title":"PermissionsResultEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-up-event/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEvent / UpEvent UpEvent \u00b6 [androidJvm]\\ object UpEvent : NavEvent Navigates up.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event/-up-event/#upevent","text":"[androidJvm]\\ object UpEvent : NavEvent Navigates up.","title":"UpEvent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator NavEventNavigator \u00b6 [androidJvm]\\ open class NavEventNavigator A navigator that allows to fire events through it\u2019s methods. These events are publicly exposed through the navEvents that can be collected and acted upon by a NavigationHandler. This allows to trigger navigation actions from outside the view layer without keeping references to Android framework classes that might leak. It also improves the testability of your navigation logic since it is possible to just write test that the correct events were emitted. For back press handling based on logic backPresses is available. Activity results and permission requests can be handled through registerForActivityResult/ navigateForResult and registerForPermissionsResult/ requestPermissions respectively. Constructors \u00b6 NavEventNavigator [androidJvm] fun NavEventNavigator () Functions \u00b6 Name Summary backPresses [androidJvm] fun backPresses (): Flow< Unit > Returns a Flow that will emit Unit on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. [androidJvm] fun < T > backPresses (value: T ): Flow< T > Returns a Flow that will emit value on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. deliverNavigationResult [androidJvm] fun < O : Parcelable > deliverNavigationResult (key: NavigationResultRequest.Key < O >, result: O ) Delivers the result to the destination that created key . navigateBack [androidJvm] fun navigateBack () Triggers a new NavEvent that pops the back stack to the previous destination. navigateBackTo [androidJvm] inline fun < T : BaseRoute > navigateBackTo (inclusive: Boolean = false) Triggers a new NavEvent that pops the back stack to T . If inclusive is true T itself will also be popped. [androidJvm] fun navigateBackTo (popUpTo: KClass <out BaseRoute >, inclusive: Boolean = false) navigateForResult [androidJvm] fun navigateForResult (launcher: ActivityResultRequest < Void ?, *>) Triggers a new NavEvent that launches the given launcher . [androidJvm] fun < I > navigateForResult (launcher: ActivityResultRequest < I , *>, input: I ) Triggers a new NavEvent that launches the given launcher with the given input . navigateTo [androidJvm] fun navigateTo (route: NavRoute ) Triggers a new NavEvent to navigate to the given route . navigateToRoot [androidJvm] fun navigateToRoot (root: NavRoot , restoreRootState: Boolean = false) Triggers a new NavEvent to navigate to the given root . The current back stack will be popped and saved. Whether the backstack of the given root is restored depends on restoreRootState . navigateUp [androidJvm] fun navigateUp () Triggers a new NavEvent that causes up navigation. requestPermissions [androidJvm] fun requestPermissions (request: PermissionsResultRequest , vararg permissions: String ) fun requestPermissions (request: PermissionsResultRequest , permissions: List < String >) Triggers a new NavEvent that requests the given permissions . Properties \u00b6 Name Summary activityResultRequests [androidJvm] val activityResultRequests : List < ActivityResultRequest <*, *>> navEvents [androidJvm] val navEvents : Flow< NavEvent > A Flow to collect NavEvents produced by this navigator. navigationResultRequests [androidJvm] val navigationResultRequests : List < NavigationResultRequest <*>> onBackPressedCallback [androidJvm] val onBackPressedCallback : OnBackPressedCallback permissionsResultRequests [androidJvm] val permissionsResultRequests : List < PermissionsResultRequest >","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/#naveventnavigator","text":"[androidJvm]\\ open class NavEventNavigator A navigator that allows to fire events through it\u2019s methods. These events are publicly exposed through the navEvents that can be collected and acted upon by a NavigationHandler. This allows to trigger navigation actions from outside the view layer without keeping references to Android framework classes that might leak. It also improves the testability of your navigation logic since it is possible to just write test that the correct events were emitted. For back press handling based on logic backPresses is available. Activity results and permission requests can be handled through registerForActivityResult/ navigateForResult and registerForPermissionsResult/ requestPermissions respectively.","title":"NavEventNavigator"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/#constructors","text":"NavEventNavigator [androidJvm] fun NavEventNavigator ()","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/#functions","text":"Name Summary backPresses [androidJvm] fun backPresses (): Flow< Unit > Returns a Flow that will emit Unit on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. [androidJvm] fun < T > backPresses (value: T ): Flow< T > Returns a Flow that will emit value on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. deliverNavigationResult [androidJvm] fun < O : Parcelable > deliverNavigationResult (key: NavigationResultRequest.Key < O >, result: O ) Delivers the result to the destination that created key . navigateBack [androidJvm] fun navigateBack () Triggers a new NavEvent that pops the back stack to the previous destination. navigateBackTo [androidJvm] inline fun < T : BaseRoute > navigateBackTo (inclusive: Boolean = false) Triggers a new NavEvent that pops the back stack to T . If inclusive is true T itself will also be popped. [androidJvm] fun navigateBackTo (popUpTo: KClass <out BaseRoute >, inclusive: Boolean = false) navigateForResult [androidJvm] fun navigateForResult (launcher: ActivityResultRequest < Void ?, *>) Triggers a new NavEvent that launches the given launcher . [androidJvm] fun < I > navigateForResult (launcher: ActivityResultRequest < I , *>, input: I ) Triggers a new NavEvent that launches the given launcher with the given input . navigateTo [androidJvm] fun navigateTo (route: NavRoute ) Triggers a new NavEvent to navigate to the given route . navigateToRoot [androidJvm] fun navigateToRoot (root: NavRoot , restoreRootState: Boolean = false) Triggers a new NavEvent to navigate to the given root . The current back stack will be popped and saved. Whether the backstack of the given root is restored depends on restoreRootState . navigateUp [androidJvm] fun navigateUp () Triggers a new NavEvent that causes up navigation. requestPermissions [androidJvm] fun requestPermissions (request: PermissionsResultRequest , vararg permissions: String ) fun requestPermissions (request: PermissionsResultRequest , permissions: List < String >) Triggers a new NavEvent that requests the given permissions .","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/#properties","text":"Name Summary activityResultRequests [androidJvm] val activityResultRequests : List < ActivityResultRequest <*, *>> navEvents [androidJvm] val navEvents : Flow< NavEvent > A Flow to collect NavEvents produced by this navigator. navigationResultRequests [androidJvm] val navigationResultRequests : List < NavigationResultRequest <*>> onBackPressedCallback [androidJvm] val onBackPressedCallback : OnBackPressedCallback permissionsResultRequests [androidJvm] val permissionsResultRequests : List < PermissionsResultRequest >","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/-nav-event-navigator/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / NavEventNavigator NavEventNavigator \u00b6 [androidJvm]\\ fun NavEventNavigator ()","title":" nav event navigator"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/-nav-event-navigator/#naveventnavigator","text":"[androidJvm]\\ fun NavEventNavigator ()","title":"NavEventNavigator"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/activity-result-requests/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / activityResultRequests activityResultRequests \u00b6 [androidJvm]\\ val activityResultRequests : List < ActivityResultRequest <*, *>>","title":"Activity result requests"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/activity-result-requests/#activityresultrequests","text":"[androidJvm]\\ val activityResultRequests : List < ActivityResultRequest <*, *>>","title":"activityResultRequests"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/back-presses/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / backPresses backPresses \u00b6 [androidJvm]\\ fun backPresses (): Flow< Unit > Returns a Flow that will emit Unit on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. When this is called multiple times only the latest caller will receive emissions. [androidJvm]\\ fun < T > backPresses (value: T ): Flow< T > Returns a Flow that will emit value on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. When this is called multiple times only the latest caller will receive emissions.","title":"Back presses"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/back-presses/#backpresses","text":"[androidJvm]\\ fun backPresses (): Flow< Unit > Returns a Flow that will emit Unit on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. When this is called multiple times only the latest caller will receive emissions. [androidJvm]\\ fun < T > backPresses (value: T ): Flow< T > Returns a Flow that will emit value on every back press. While this Flow is being collected all back presses will be intercepted and none of the default back press handling happens. When this is called multiple times only the latest caller will receive emissions.","title":"backPresses"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/deliver-navigation-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / deliverNavigationResult deliverNavigationResult \u00b6 [androidJvm]\\ fun < O : Parcelable > deliverNavigationResult (key: NavigationResultRequest.Key < O >, result: O ) Delivers the result to the destination that created key .","title":"Deliver navigation result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/deliver-navigation-result/#delivernavigationresult","text":"[androidJvm]\\ fun < O : Parcelable > deliverNavigationResult (key: NavigationResultRequest.Key < O >, result: O ) Delivers the result to the destination that created key .","title":"deliverNavigationResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/nav-events/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navEvents navEvents \u00b6 [androidJvm]\\ val navEvents : Flow< NavEvent > A Flow to collect NavEvents produced by this navigator.","title":"Nav events"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/nav-events/#navevents","text":"[androidJvm]\\ val navEvents : Flow< NavEvent > A Flow to collect NavEvents produced by this navigator.","title":"navEvents"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-back-to/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigateBackTo navigateBackTo \u00b6 [androidJvm]\\ inline fun < T : BaseRoute > navigateBackTo (inclusive: Boolean = false) Triggers a new NavEvent that pops the back stack to T . If inclusive is true T itself will also be popped. [androidJvm]\\ fun navigateBackTo (popUpTo: KClass <out BaseRoute >, inclusive: Boolean = false)","title":"Navigate back to"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-back-to/#navigatebackto","text":"[androidJvm]\\ inline fun < T : BaseRoute > navigateBackTo (inclusive: Boolean = false) Triggers a new NavEvent that pops the back stack to T . If inclusive is true T itself will also be popped. [androidJvm]\\ fun navigateBackTo (popUpTo: KClass <out BaseRoute >, inclusive: Boolean = false)","title":"navigateBackTo"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-back/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigateBack navigateBack \u00b6 [androidJvm]\\ fun navigateBack () Triggers a new NavEvent that pops the back stack to the previous destination.","title":"Navigate back"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-back/#navigateback","text":"[androidJvm]\\ fun navigateBack () Triggers a new NavEvent that pops the back stack to the previous destination.","title":"navigateBack"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-for-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigateForResult navigateForResult \u00b6 [androidJvm]\\ fun navigateForResult (launcher: ActivityResultRequest < Void ?, *>) Triggers a new NavEvent that launches the given launcher . The launcher can be obtained by calling registerForActivityResult. [androidJvm]\\ fun < I > navigateForResult (launcher: ActivityResultRequest < I , *>, input: I ) Triggers a new NavEvent that launches the given launcher with the given input . The launcher can be obtained by calling registerForActivityResult.","title":"Navigate for result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-for-result/#navigateforresult","text":"[androidJvm]\\ fun navigateForResult (launcher: ActivityResultRequest < Void ?, *>) Triggers a new NavEvent that launches the given launcher . The launcher can be obtained by calling registerForActivityResult. [androidJvm]\\ fun < I > navigateForResult (launcher: ActivityResultRequest < I , *>, input: I ) Triggers a new NavEvent that launches the given launcher with the given input . The launcher can be obtained by calling registerForActivityResult.","title":"navigateForResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-to-root/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigateToRoot navigateToRoot \u00b6 [androidJvm]\\ fun navigateToRoot (root: NavRoot , restoreRootState: Boolean = false) Triggers a new NavEvent to navigate to the given root . The current back stack will be popped and saved. Whether the backstack of the given root is restored depends on restoreRootState .","title":"Navigate to root"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-to-root/#navigatetoroot","text":"[androidJvm]\\ fun navigateToRoot (root: NavRoot , restoreRootState: Boolean = false) Triggers a new NavEvent to navigate to the given root . The current back stack will be popped and saved. Whether the backstack of the given root is restored depends on restoreRootState .","title":"navigateToRoot"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-to/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigateTo navigateTo \u00b6 [androidJvm]\\ fun navigateTo (route: NavRoute ) Triggers a new NavEvent to navigate to the given route .","title":"Navigate to"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-to/#navigateto","text":"[androidJvm]\\ fun navigateTo (route: NavRoute ) Triggers a new NavEvent to navigate to the given route .","title":"navigateTo"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-up/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigateUp navigateUp \u00b6 [androidJvm]\\ fun navigateUp () Triggers a new NavEvent that causes up navigation.","title":"Navigate up"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigate-up/#navigateup","text":"[androidJvm]\\ fun navigateUp () Triggers a new NavEvent that causes up navigation.","title":"navigateUp"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigation-result-requests/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / navigationResultRequests navigationResultRequests \u00b6 [androidJvm]\\ val navigationResultRequests : List < NavigationResultRequest <*>>","title":"Navigation result requests"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/navigation-result-requests/#navigationresultrequests","text":"[androidJvm]\\ val navigationResultRequests : List < NavigationResultRequest <*>>","title":"navigationResultRequests"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/on-back-pressed-callback/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / onBackPressedCallback onBackPressedCallback \u00b6 [androidJvm]\\ val onBackPressedCallback : OnBackPressedCallback","title":"On back pressed callback"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/on-back-pressed-callback/#onbackpressedcallback","text":"[androidJvm]\\ val onBackPressedCallback : OnBackPressedCallback","title":"onBackPressedCallback"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/permissions-result-requests/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / permissionsResultRequests permissionsResultRequests \u00b6 [androidJvm]\\ val permissionsResultRequests : List < PermissionsResultRequest >","title":"Permissions result requests"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/permissions-result-requests/#permissionsresultrequests","text":"[androidJvm]\\ val permissionsResultRequests : List < PermissionsResultRequest >","title":"permissionsResultRequests"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/request-permissions/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavEventNavigator / requestPermissions requestPermissions \u00b6 [androidJvm]\\ fun requestPermissions (request: PermissionsResultRequest , vararg permissions: String ) fun requestPermissions (request: PermissionsResultRequest , permissions: List < String >) Triggers a new NavEvent that requests the given permissions . Compared to using navigateForResult with androidx.activity.result.contract.ActivityResultContracts.RequestPermission this also gives you the information whether a permission was permanently denied . The request can be obtained by calling registerForPermissionsResult.","title":"Request permissions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-event-navigator/request-permissions/#requestpermissions","text":"[androidJvm]\\ fun requestPermissions (request: PermissionsResultRequest , vararg permissions: String ) fun requestPermissions (request: PermissionsResultRequest , permissions: List < String >) Triggers a new NavEvent that requests the given permissions . Compared to using navigateForResult with androidx.activity.result.contract.ActivityResultContracts.RequestPermission this also gives you the information whether a permission was permanently denied . The request can be obtained by calling registerForPermissionsResult.","title":"requestPermissions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-root/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavRoot NavRoot \u00b6 [androidJvm]\\ interface NavRoot : BaseRoute This is similar to a NavRoute but represents the route to the start destination used in a backstack. When you navigate to a NavRoot the current backstack is saved and removed so that the NavRoot is right on top of the start destination. When the implementing class is Parcelable , the instance of route will be put into the navigation arguments and is then available to the target screens.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-root/#navroot","text":"[androidJvm]\\ interface NavRoot : BaseRoute This is similar to a NavRoute but represents the route to the start destination used in a backstack. When you navigate to a NavRoot the current backstack is saved and removed so that the NavRoot is right on top of the start destination. When the implementing class is Parcelable , the instance of route will be put into the navigation arguments and is then available to the target screens.","title":"NavRoot"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-route/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavRoute NavRoute \u00b6 [androidJvm]\\ interface NavRoute : BaseRoute Represents the route to a destination. When the implementing class is Parcelable , the instance of route will be put into the navigation arguments and is then available to the target screens.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-nav-route/#navroute","text":"[androidJvm]\\ interface NavRoute : BaseRoute Represents the route to a destination. When the implementing class is Parcelable , the instance of route will be put into the navigation arguments and is then available to the target screens.","title":"NavRoute"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest NavigationResultRequest \u00b6 [androidJvm]\\ class NavigationResultRequest < O : Parcelable > : ResultOwner < O > Class that exposes a results that can be used to observe results for the given key . See ResultOwner and NavEventNavigator.registerForNavigationResult. Types \u00b6 Name Summary Key [androidJvm] data class Key < O : Parcelable >constructor(destinationId: Int , requestKey: String ) : Parcelable Use to identify where the result should be delivered to. Functions \u00b6 Name Summary handleResult [androidJvm] fun handleResult (result: O ) onResult [androidJvm] fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler. Properties \u00b6 Name Summary key [androidJvm] val key : NavigationResultRequest.Key < O > results [androidJvm] val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/#navigationresultrequest","text":"[androidJvm]\\ class NavigationResultRequest < O : Parcelable > : ResultOwner < O > Class that exposes a results that can be used to observe results for the given key . See ResultOwner and NavEventNavigator.registerForNavigationResult.","title":"NavigationResultRequest"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/#types","text":"Name Summary Key [androidJvm] data class Key < O : Parcelable >constructor(destinationId: Int , requestKey: String ) : Parcelable Use to identify where the result should be delivered to.","title":"Types"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/#functions","text":"Name Summary handleResult [androidJvm] fun handleResult (result: O ) onResult [androidJvm] fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler.","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/#properties","text":"Name Summary key [androidJvm] val key : NavigationResultRequest.Key < O > results [androidJvm] val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/handle-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / handleResult handleResult \u00b6 [androidJvm]\\ fun handleResult (result: O )","title":"Handle result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/handle-result/#handleresult","text":"[androidJvm]\\ fun handleResult (result: O )","title":"handleResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/key/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / key key \u00b6 [androidJvm]\\ val key : NavigationResultRequest.Key < O >","title":"Key"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/key/#key","text":"[androidJvm]\\ val key : NavigationResultRequest.Key < O >","title":"key"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key Key \u00b6 [androidJvm]\\ data class Key < O : Parcelable >constructor(destinationId: Int , requestKey: String ) : Parcelable Use to identify where the result should be delivered to. Constructors \u00b6 Key [androidJvm] fun Key (parcel: Parcel ) Key [androidJvm] fun Key (destinationId: Int , requestKey: String ) Types \u00b6 Name Summary CREATOR [androidJvm] object CREATOR : Parcelable.Creator < NavigationResultRequest.Key <*>> Functions \u00b6 Name Summary describeContents [androidJvm] open override fun describeContents (): Int writeToParcel [androidJvm] open override fun writeToParcel (parcel: Parcel , flags: Int ) Properties \u00b6 Name Summary destinationId [androidJvm] val destinationId : Int requestKey [androidJvm] val requestKey : String","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/#key","text":"[androidJvm]\\ data class Key < O : Parcelable >constructor(destinationId: Int , requestKey: String ) : Parcelable Use to identify where the result should be delivered to.","title":"Key"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/#constructors","text":"Key [androidJvm] fun Key (parcel: Parcel ) Key [androidJvm] fun Key (destinationId: Int , requestKey: String )","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/#types","text":"Name Summary CREATOR [androidJvm] object CREATOR : Parcelable.Creator < NavigationResultRequest.Key <*>>","title":"Types"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/#functions","text":"Name Summary describeContents [androidJvm] open override fun describeContents (): Int writeToParcel [androidJvm] open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/#properties","text":"Name Summary destinationId [androidJvm] val destinationId : Int requestKey [androidJvm] val requestKey : String","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-key/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / Key Key \u00b6 [androidJvm]\\ fun Key (parcel: Parcel ) fun Key (destinationId: Int , requestKey: String )","title":" key"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-key/#key","text":"[androidJvm]\\ fun Key (parcel: Parcel ) fun Key (destinationId: Int , requestKey: String )","title":"Key"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/describe-contents/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / describeContents describeContents \u00b6 [androidJvm]\\ open override fun describeContents (): Int","title":"Describe contents"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/describe-contents/#describecontents","text":"[androidJvm]\\ open override fun describeContents (): Int","title":"describeContents"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/destination-id/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / destinationId destinationId \u00b6 [androidJvm]\\ val destinationId : Int","title":"Destination id"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/destination-id/#destinationid","text":"[androidJvm]\\ val destinationId : Int","title":"destinationId"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/request-key/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / requestKey requestKey \u00b6 [androidJvm]\\ val requestKey : String","title":"Request key"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/request-key/#requestkey","text":"[androidJvm]\\ val requestKey : String","title":"requestKey"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/write-to-parcel/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / writeToParcel writeToParcel \u00b6 [androidJvm]\\ open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"Write to parcel"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/write-to-parcel/#writetoparcel","text":"[androidJvm]\\ open override fun writeToParcel (parcel: Parcel , flags: Int )","title":"writeToParcel"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / CREATOR CREATOR \u00b6 [androidJvm]\\ object CREATOR : Parcelable.Creator < NavigationResultRequest.Key <*>> Functions \u00b6 Name Summary createFromParcel [androidJvm] open override fun createFromParcel (parcel: Parcel ): NavigationResultRequest.Key <*> newArray [androidJvm] open override fun newArray (size: Int ): Array < NavigationResultRequest.Key <*>?>","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/#creator","text":"[androidJvm]\\ object CREATOR : Parcelable.Creator < NavigationResultRequest.Key <*>>","title":"CREATOR"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/#functions","text":"Name Summary createFromParcel [androidJvm] open override fun createFromParcel (parcel: Parcel ): NavigationResultRequest.Key <*> newArray [androidJvm] open override fun newArray (size: Int ): Array < NavigationResultRequest.Key <*>?>","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/create-from-parcel/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / CREATOR / createFromParcel createFromParcel \u00b6 [androidJvm]\\ open override fun createFromParcel (parcel: Parcel ): NavigationResultRequest.Key <*>","title":"Create from parcel"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"[androidJvm]\\ open override fun createFromParcel (parcel: Parcel ): NavigationResultRequest.Key <*>","title":"createFromParcel"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/new-array/","text":"// navigator-runtime / com.freeletics.mad.navigator / NavigationResultRequest / Key / CREATOR / newArray newArray \u00b6 [androidJvm]\\ open override fun newArray (size: Int ): Array < NavigationResultRequest.Key <*>?>","title":"New array"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-navigation-result-request/-key/-c-r-e-a-t-o-r/new-array/#newarray","text":"[androidJvm]\\ open override fun newArray (size: Int ): Array < NavigationResultRequest.Key <*>?>","title":"newArray"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/","text":"// navigator-runtime / com.freeletics.mad.navigator / PermissionsResultRequest PermissionsResultRequest \u00b6 [androidJvm]\\ class PermissionsResultRequest : ResultOwner < Map < String , PermissionsResultRequest.PermissionResult >> Class returned from NavEventNavigator.registerForPermissionsResult. This class has two purposes: It exposes a resultsFlow that can be used to observe incoming permission results It can be passed to NavEventNavigator.requestPermissions to trigger the execution of a permissions request This provides extra functionality over ActivityResultRequest by also checking android.app.Activity.shouldShowRequestPermissionRationale for each permission that was denied. It returns a PermissionResult instead of just a simple boolean. This allows to detect permanent denials. Types \u00b6 Name Summary PermissionResult [androidJvm] enum PermissionResult : Enum < PermissionsResultRequest.PermissionResult > The status of the requested permission. Functions \u00b6 Name Summary handleResult [androidJvm] fun handleResult (resultMap: Map < String , Boolean >, activity: Activity ) onResult [androidJvm] fun onResult (result: Map < String , PermissionsResultRequest.PermissionResult >) Deliver a new result to results . This method should be called by a NavEventNavigationHandler. Properties \u00b6 Name Summary results [androidJvm] val results : Flow< Map < String , PermissionsResultRequest.PermissionResult >> Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/#permissionsresultrequest","text":"[androidJvm]\\ class PermissionsResultRequest : ResultOwner < Map < String , PermissionsResultRequest.PermissionResult >> Class returned from NavEventNavigator.registerForPermissionsResult. This class has two purposes: It exposes a resultsFlow that can be used to observe incoming permission results It can be passed to NavEventNavigator.requestPermissions to trigger the execution of a permissions request This provides extra functionality over ActivityResultRequest by also checking android.app.Activity.shouldShowRequestPermissionRationale for each permission that was denied. It returns a PermissionResult instead of just a simple boolean. This allows to detect permanent denials.","title":"PermissionsResultRequest"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/#types","text":"Name Summary PermissionResult [androidJvm] enum PermissionResult : Enum < PermissionsResultRequest.PermissionResult > The status of the requested permission.","title":"Types"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/#functions","text":"Name Summary handleResult [androidJvm] fun handleResult (resultMap: Map < String , Boolean >, activity: Activity ) onResult [androidJvm] fun onResult (result: Map < String , PermissionsResultRequest.PermissionResult >) Deliver a new result to results . This method should be called by a NavEventNavigationHandler.","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/#properties","text":"Name Summary results [androidJvm] val results : Flow< Map < String , PermissionsResultRequest.PermissionResult >> Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/handle-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / PermissionsResultRequest / handleResult handleResult \u00b6 [androidJvm]\\ fun handleResult (resultMap: Map < String , Boolean >, activity: Activity )","title":"Handle result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/handle-result/#handleresult","text":"[androidJvm]\\ fun handleResult (resultMap: Map < String , Boolean >, activity: Activity )","title":"handleResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / PermissionsResultRequest / PermissionResult PermissionResult \u00b6 [androidJvm]\\ enum PermissionResult : Enum < PermissionsResultRequest.PermissionResult > The status of the requested permission. Entries \u00b6 DENIED_PERMANENTLY [androidJvm] DENIED_PERMANENTLY () DENIED [androidJvm] DENIED () GRANTED [androidJvm] GRANTED () Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/#permissionresult","text":"[androidJvm]\\ enum PermissionResult : Enum < PermissionsResultRequest.PermissionResult > The status of the requested permission.","title":"PermissionResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/#entries","text":"DENIED_PERMANENTLY [androidJvm] DENIED_PERMANENTLY () DENIED [androidJvm] DENIED () GRANTED [androidJvm] GRANTED ()","title":"Entries"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-d-e-n-i-e-d/","text":"// navigator-runtime / com.freeletics.mad.navigator / PermissionsResultRequest / PermissionResult / DENIED DENIED \u00b6 [androidJvm]\\ DENIED () Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-d-e-n-i-e-d/#denied","text":"[androidJvm]\\ DENIED ()","title":"DENIED"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-d-e-n-i-e-d/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-d-e-n-i-e-d_-p-e-r-m-a-n-e-n-t-l-y/","text":"// navigator-runtime / com.freeletics.mad.navigator / PermissionsResultRequest / PermissionResult / DENIED_PERMANENTLY DENIED_PERMANENTLY \u00b6 [androidJvm]\\ DENIED_PERMANENTLY () Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-d-e-n-i-e-d_-p-e-r-m-a-n-e-n-t-l-y/#denied_permanently","text":"[androidJvm]\\ DENIED_PERMANENTLY ()","title":"DENIED_PERMANENTLY"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-d-e-n-i-e-d_-p-e-r-m-a-n-e-n-t-l-y/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-g-r-a-n-t-e-d/","text":"// navigator-runtime / com.freeletics.mad.navigator / PermissionsResultRequest / PermissionResult / GRANTED GRANTED \u00b6 [androidJvm]\\ GRANTED () Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-g-r-a-n-t-e-d/#granted","text":"[androidJvm]\\ GRANTED ()","title":"GRANTED"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-permissions-result-request/-permission-result/-g-r-a-n-t-e-d/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/","text":"// navigator-runtime / com.freeletics.mad.navigator / ResultOwner ResultOwner \u00b6 [androidJvm]\\ sealed class ResultOwner < O > A base class for anything that exposes a Flow of results . Results will only be delivered to one collector at a time. Functions \u00b6 Name Summary onResult [androidJvm] fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler. Properties \u00b6 Name Summary results [androidJvm] val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time. Inheritors \u00b6 Name ActivityResultRequest PermissionsResultRequest NavigationResultRequest","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/#resultowner","text":"[androidJvm]\\ sealed class ResultOwner < O > A base class for anything that exposes a Flow of results . Results will only be delivered to one collector at a time.","title":"ResultOwner"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/#functions","text":"Name Summary onResult [androidJvm] fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler.","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/#properties","text":"Name Summary results [androidJvm] val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Properties"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/#inheritors","text":"Name ActivityResultRequest PermissionsResultRequest NavigationResultRequest","title":"Inheritors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/on-result/","text":"// navigator-runtime / com.freeletics.mad.navigator / ResultOwner / onResult onResult \u00b6 [androidJvm]\\ fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler.","title":"On result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/on-result/#onresult","text":"[androidJvm]\\ fun onResult (result: O ) Deliver a new result to results . This method should be called by a NavEventNavigationHandler.","title":"onResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/results/","text":"// navigator-runtime / com.freeletics.mad.navigator / ResultOwner / results results \u00b6 [androidJvm]\\ val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"Results"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator/-result-owner/results/#results","text":"[androidJvm]\\ val results : Flow< O > Emits any result passed to onResult . Results will only be delivered to one collector at a time.","title":"results"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal Package com.freeletics.mad.navigator.internal \u00b6 Types \u00b6 Name Summary InternalNavigatorApi [androidJvm] annotation class InternalNavigatorApi Code marked with InternalNavigatorApi has no guarantees about API stability and can be changed at any time. RequestPermissionsContract [androidJvm] class RequestPermissionsContract : ActivityResultContract < List < String >, Map < String , Boolean >> Wrapper for ActivityResultContracts.RequestMultiplePermissions so that a List is used as input instead of Array . The reason for this is that Array.equals does not compare the contents which makes testing com.freeletics.mad.navigator.NavEvent.ActivityResultEvent painful. Functions \u00b6 Name Summary destinationId [androidJvm] fun BaseRoute . destinationId (): Int fun KClass <out BaseRoute >. destinationId (): Int getArguments [androidJvm] fun BaseRoute . getArguments (): Bundle navigate [androidJvm] fun navigate (event: NavEvent , controller: NavController , activityLaunchers: Map < ActivityResultRequest < , *>, ActivityResultLauncher < >>, permissionLaunchers: Map < PermissionsResultRequest , ActivityResultLauncher < List < String >>>) toRoute [androidJvm] fun < T : BaseRoute > Bundle . toRoute (): T","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/#package-comfreeleticsmadnavigatorinternal","text":"","title":"Package com.freeletics.mad.navigator.internal"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/#types","text":"Name Summary InternalNavigatorApi [androidJvm] annotation class InternalNavigatorApi Code marked with InternalNavigatorApi has no guarantees about API stability and can be changed at any time. RequestPermissionsContract [androidJvm] class RequestPermissionsContract : ActivityResultContract < List < String >, Map < String , Boolean >> Wrapper for ActivityResultContracts.RequestMultiplePermissions so that a List is used as input instead of Array . The reason for this is that Array.equals does not compare the contents which makes testing com.freeletics.mad.navigator.NavEvent.ActivityResultEvent painful.","title":"Types"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/#functions","text":"Name Summary destinationId [androidJvm] fun BaseRoute . destinationId (): Int fun KClass <out BaseRoute >. destinationId (): Int getArguments [androidJvm] fun BaseRoute . getArguments (): Bundle navigate [androidJvm] fun navigate (event: NavEvent , controller: NavController , activityLaunchers: Map < ActivityResultRequest < , *>, ActivityResultLauncher < >>, permissionLaunchers: Map < PermissionsResultRequest , ActivityResultLauncher < List < String >>>) toRoute [androidJvm] fun < T : BaseRoute > Bundle . toRoute (): T","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/destination-id/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / destinationId destinationId \u00b6 [androidJvm]\\ fun BaseRoute . destinationId (): Int fun KClass <out BaseRoute >. destinationId (): Int","title":"Destination id"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/destination-id/#destinationid","text":"[androidJvm]\\ fun BaseRoute . destinationId (): Int fun KClass <out BaseRoute >. destinationId (): Int","title":"destinationId"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/get-arguments/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / getArguments getArguments \u00b6 [androidJvm]\\ fun BaseRoute . getArguments (): Bundle","title":"Get arguments"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/get-arguments/#getarguments","text":"[androidJvm]\\ fun BaseRoute . getArguments (): Bundle","title":"getArguments"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/navigate/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / navigate navigate \u00b6 [androidJvm]\\ fun navigate (event: NavEvent , controller: NavController , activityLaunchers: Map < ActivityResultRequest < , *>, ActivityResultLauncher < >>, permissionLaunchers: Map < PermissionsResultRequest , ActivityResultLauncher < List < String >>>)","title":"Navigate"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/navigate/#navigate","text":"[androidJvm]\\ fun navigate (event: NavEvent , controller: NavController , activityLaunchers: Map < ActivityResultRequest < , *>, ActivityResultLauncher < >>, permissionLaunchers: Map < PermissionsResultRequest , ActivityResultLauncher < List < String >>>)","title":"navigate"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/to-route/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / toRoute toRoute \u00b6 [androidJvm]\\ fun < T : BaseRoute > Bundle . toRoute (): T","title":"To route"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/to-route/#toroute","text":"[androidJvm]\\ fun < T : BaseRoute > Bundle . toRoute (): T","title":"toRoute"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-internal-navigator-api/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / InternalNavigatorApi InternalNavigatorApi \u00b6 [androidJvm]\\ annotation class InternalNavigatorApi Code marked with InternalNavigatorApi has no guarantees about API stability and can be changed at any time. Constructors \u00b6 InternalNavigatorApi [androidJvm] fun InternalNavigatorApi ()","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-internal-navigator-api/#internalnavigatorapi","text":"[androidJvm]\\ annotation class InternalNavigatorApi Code marked with InternalNavigatorApi has no guarantees about API stability and can be changed at any time.","title":"InternalNavigatorApi"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-internal-navigator-api/#constructors","text":"InternalNavigatorApi [androidJvm] fun InternalNavigatorApi ()","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-internal-navigator-api/-internal-navigator-api/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / InternalNavigatorApi / InternalNavigatorApi InternalNavigatorApi \u00b6 [androidJvm]\\ fun InternalNavigatorApi ()","title":" internal navigator api"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-internal-navigator-api/-internal-navigator-api/#internalnavigatorapi","text":"[androidJvm]\\ fun InternalNavigatorApi ()","title":"InternalNavigatorApi"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / RequestPermissionsContract RequestPermissionsContract \u00b6 [androidJvm]\\ class RequestPermissionsContract : ActivityResultContract < List < String >, Map < String , Boolean >> Wrapper for ActivityResultContracts.RequestMultiplePermissions so that a List is used as input instead of Array . The reason for this is that Array.equals does not compare the contents which makes testing com.freeletics.mad.navigator.NavEvent.ActivityResultEvent painful. Constructors \u00b6 RequestPermissionsContract [androidJvm] fun RequestPermissionsContract () Functions \u00b6 Name Summary createIntent [androidJvm] open override fun createIntent (context: Context , input: List < String >): Intent getSynchronousResult [androidJvm] open override fun getSynchronousResult (context: Context , input: List < String >): ActivityResultContract.SynchronousResult < Map < String , Boolean >>? parseResult [androidJvm] open override fun parseResult (resultCode: Int , intent: Intent ?): Map < String , Boolean >","title":"Index"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/#requestpermissionscontract","text":"[androidJvm]\\ class RequestPermissionsContract : ActivityResultContract < List < String >, Map < String , Boolean >> Wrapper for ActivityResultContracts.RequestMultiplePermissions so that a List is used as input instead of Array . The reason for this is that Array.equals does not compare the contents which makes testing com.freeletics.mad.navigator.NavEvent.ActivityResultEvent painful.","title":"RequestPermissionsContract"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/#constructors","text":"RequestPermissionsContract [androidJvm] fun RequestPermissionsContract ()","title":"Constructors"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/#functions","text":"Name Summary createIntent [androidJvm] open override fun createIntent (context: Context , input: List < String >): Intent getSynchronousResult [androidJvm] open override fun getSynchronousResult (context: Context , input: List < String >): ActivityResultContract.SynchronousResult < Map < String , Boolean >>? parseResult [androidJvm] open override fun parseResult (resultCode: Int , intent: Intent ?): Map < String , Boolean >","title":"Functions"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/-request-permissions-contract/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / RequestPermissionsContract / RequestPermissionsContract RequestPermissionsContract \u00b6 [androidJvm]\\ fun RequestPermissionsContract ()","title":" request permissions contract"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/-request-permissions-contract/#requestpermissionscontract","text":"[androidJvm]\\ fun RequestPermissionsContract ()","title":"RequestPermissionsContract"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/create-intent/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / RequestPermissionsContract / createIntent createIntent \u00b6 [androidJvm]\\ open override fun createIntent (context: Context , input: List < String >): Intent","title":"Create intent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/create-intent/#createintent","text":"[androidJvm]\\ open override fun createIntent (context: Context , input: List < String >): Intent","title":"createIntent"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/get-synchronous-result/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / RequestPermissionsContract / getSynchronousResult getSynchronousResult \u00b6 [androidJvm]\\ open override fun getSynchronousResult (context: Context , input: List < String >): ActivityResultContract.SynchronousResult < Map < String , Boolean >>?","title":"Get synchronous result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/get-synchronous-result/#getsynchronousresult","text":"[androidJvm]\\ open override fun getSynchronousResult (context: Context , input: List < String >): ActivityResultContract.SynchronousResult < Map < String , Boolean >>?","title":"getSynchronousResult"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/parse-result/","text":"// navigator-runtime / com.freeletics.mad.navigator.internal / RequestPermissionsContract / parseResult parseResult \u00b6 [androidJvm]\\ open override fun parseResult (resultCode: Int , intent: Intent ?): Map < String , Boolean >","title":"Parse result"},{"location":"Javadoc/navigator/navigator-runtime/com.freeletics.mad.navigator.internal/-request-permissions-contract/parse-result/#parseresult","text":"[androidJvm]\\ open override fun parseResult (resultCode: Int , intent: Intent ?): Map < String , Boolean >","title":"parseResult"},{"location":"Javadoc/navigator-compose/","text":"// navigator-runtime-compose navigator-runtime-compose \u00b6 Packages \u00b6 Name com.freeletics.mad.navigator.compose","title":"Index"},{"location":"Javadoc/navigator-compose/#navigator-runtime-compose","text":"","title":"navigator-runtime-compose"},{"location":"Javadoc/navigator-compose/#packages","text":"Name com.freeletics.mad.navigator.compose","title":"Packages"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose Package com.freeletics.mad.navigator.compose \u00b6 Types \u00b6 Name Summary NavDestination [androidJvm] interface NavDestination A destination that can be navigated to. See NavHost for how to configure a NavGraph with it. Functions \u00b6 Name Summary ActivityDestination [androidJvm] inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation. BottomSheetDestination [androidJvm] inline fun < T : NavRoute> BottomSheetDestination (noinline bottomSheetContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a bottom sheet. The class of T will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of T . DialogDestination [androidJvm] inline fun < T : NavRoute> DialogDestination (noinline dialogContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of T . NavHost [androidJvm] @Composable fun NavHost (startRoute: BaseRoute, destinations: Set < NavDestination >) Create a new androidx.navigation.compose.NavHost with a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph. NavigationSetup [androidJvm] @Composable fun NavigationSetup (navigator: NavEventNavigator) Sets up the NavEventNavigator inside the current composition so that it\u2019s events are handled while the composition is active. ScreenDestination [androidJvm] inline fun < T : BaseRoute> ScreenDestination (noinline screenContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of T . Properties \u00b6 Name Summary LocalNavController [androidJvm] val LocalNavController : ProvidableCompositionLocal< NavController >","title":"Index"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/#package-comfreeleticsmadnavigatorcompose","text":"","title":"Package com.freeletics.mad.navigator.compose"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/#types","text":"Name Summary NavDestination [androidJvm] interface NavDestination A destination that can be navigated to. See NavHost for how to configure a NavGraph with it.","title":"Types"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/#functions","text":"Name Summary ActivityDestination [androidJvm] inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation. BottomSheetDestination [androidJvm] inline fun < T : NavRoute> BottomSheetDestination (noinline bottomSheetContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a bottom sheet. The class of T will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of T . DialogDestination [androidJvm] inline fun < T : NavRoute> DialogDestination (noinline dialogContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of T . NavHost [androidJvm] @Composable fun NavHost (startRoute: BaseRoute, destinations: Set < NavDestination >) Create a new androidx.navigation.compose.NavHost with a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph. NavigationSetup [androidJvm] @Composable fun NavigationSetup (navigator: NavEventNavigator) Sets up the NavEventNavigator inside the current composition so that it\u2019s events are handled while the composition is active. ScreenDestination [androidJvm] inline fun < T : BaseRoute> ScreenDestination (noinline screenContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of T .","title":"Functions"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/#properties","text":"Name Summary LocalNavController [androidJvm] val LocalNavController : ProvidableCompositionLocal< NavController >","title":"Properties"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-activity-destination/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / ActivityDestination ActivityDestination \u00b6 [androidJvm]\\ inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation.","title":" activity destination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-activity-destination/#activitydestination","text":"[androidJvm]\\ inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation.","title":"ActivityDestination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-bottom-sheet-destination/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / BottomSheetDestination BottomSheetDestination \u00b6 [androidJvm]\\ inline fun < T : NavRoute> BottomSheetDestination (noinline bottomSheetContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a bottom sheet. The class of T will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of T .","title":" bottom sheet destination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-bottom-sheet-destination/#bottomsheetdestination","text":"[androidJvm]\\ inline fun < T : NavRoute> BottomSheetDestination (noinline bottomSheetContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a bottom sheet. The class of T will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of T .","title":"BottomSheetDestination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-dialog-destination/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / DialogDestination DialogDestination \u00b6 [androidJvm]\\ inline fun < T : NavRoute> DialogDestination (noinline dialogContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of T .","title":" dialog destination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-dialog-destination/#dialogdestination","text":"[androidJvm]\\ inline fun < T : NavRoute> DialogDestination (noinline dialogContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of T .","title":"DialogDestination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-local-nav-controller/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / LocalNavController LocalNavController \u00b6 [androidJvm]\\ val LocalNavController : ProvidableCompositionLocal< NavController >","title":" local nav controller"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-local-nav-controller/#localnavcontroller","text":"[androidJvm]\\ val LocalNavController : ProvidableCompositionLocal< NavController >","title":"LocalNavController"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-host/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavHost NavHost \u00b6 [androidJvm]\\ @Composable fun NavHost (startRoute: BaseRoute, destinations: Set < NavDestination >) Create a new androidx.navigation.compose.NavHost with a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph.","title":" nav host"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-host/#navhost","text":"[androidJvm]\\ @Composable fun NavHost (startRoute: BaseRoute, destinations: Set < NavDestination >) Create a new androidx.navigation.compose.NavHost with a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph.","title":"NavHost"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-navigation-setup/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavigationSetup NavigationSetup \u00b6 [androidJvm]\\ @Composable fun NavigationSetup (navigator: NavEventNavigator) Sets up the NavEventNavigator inside the current composition so that it\u2019s events are handled while the composition is active.","title":" navigation setup"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-navigation-setup/#navigationsetup","text":"[androidJvm]\\ @Composable fun NavigationSetup (navigator: NavEventNavigator) Sets up the NavEventNavigator inside the current composition so that it\u2019s events are handled while the composition is active.","title":"NavigationSetup"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-screen-destination/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / ScreenDestination ScreenDestination \u00b6 [androidJvm]\\ inline fun < T : BaseRoute> ScreenDestination (noinline screenContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of T .","title":" screen destination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-screen-destination/#screendestination","text":"[androidJvm]\\ inline fun < T : BaseRoute> ScreenDestination (noinline screenContent: @Composable( T ) -> Unit ): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of T .","title":"ScreenDestination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination NavDestination \u00b6 [androidJvm]\\ interface NavDestination A destination that can be navigated to. See NavHost for how to configure a NavGraph with it. Types \u00b6 Name Summary Activity [androidJvm] class Activity (route: KClass <out NavRoute>, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation. BottomSheet [androidJvm] class BottomSheet < T : NavRoute>(route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit ) : NavDestination Represents a bottom sheet. The route will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of route. Dialog [androidJvm] class Dialog < T : NavRoute>(route: KClass < T >, dialogContent: @Composable( T ) -> Unit ) : NavDestination Represents a dialog. The route will be used as a unique identifier together. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of route. Screen [androidJvm] class Screen < T : BaseRoute>(route: KClass < T >, screenContent: @Composable( T ) -> Unit ) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of route. Inheritors \u00b6 Name Screen Dialog BottomSheet Activity","title":"Index"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/#navdestination","text":"[androidJvm]\\ interface NavDestination A destination that can be navigated to. See NavHost for how to configure a NavGraph with it.","title":"NavDestination"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/#types","text":"Name Summary Activity [androidJvm] class Activity (route: KClass <out NavRoute>, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation. BottomSheet [androidJvm] class BottomSheet < T : NavRoute>(route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit ) : NavDestination Represents a bottom sheet. The route will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of route. Dialog [androidJvm] class Dialog < T : NavRoute>(route: KClass < T >, dialogContent: @Composable( T ) -> Unit ) : NavDestination Represents a dialog. The route will be used as a unique identifier together. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of route. Screen [androidJvm] class Screen < T : BaseRoute>(route: KClass < T >, screenContent: @Composable( T ) -> Unit ) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of route.","title":"Types"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/#inheritors","text":"Name Screen Dialog BottomSheet Activity","title":"Inheritors"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-activity/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / Activity Activity \u00b6 [androidJvm]\\ class Activity (route: KClass <out NavRoute>, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation. Constructors \u00b6 Activity [androidJvm] fun Activity (route: KClass <out NavRoute>, intent: Intent )","title":"Index"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-activity/#activity","text":"[androidJvm]\\ class Activity (route: KClass <out NavRoute>, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation.","title":"Activity"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-activity/#constructors","text":"Activity [androidJvm] fun Activity (route: KClass <out NavRoute>, intent: Intent )","title":"Constructors"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-activity/-activity/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / Activity / Activity Activity \u00b6 [androidJvm]\\ fun Activity (route: KClass <out NavRoute>, intent: Intent )","title":" activity"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-activity/-activity/#activity","text":"[androidJvm]\\ fun Activity (route: KClass <out NavRoute>, intent: Intent )","title":"Activity"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-bottom-sheet/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / BottomSheet BottomSheet \u00b6 [androidJvm]\\ class BottomSheet < T : NavRoute>(route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit ) : NavDestination Represents a bottom sheet. The route will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of route. Constructors \u00b6 BottomSheet [androidJvm] fun < T : NavRoute> BottomSheet (route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit )","title":"Index"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-bottom-sheet/#bottomsheet","text":"[androidJvm]\\ class BottomSheet < T : NavRoute>(route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit ) : NavDestination Represents a bottom sheet. The route will be used as a unique identifier. The given bottomSheetContent will be shown inside the bottom sheet when navigating to it by using an instance of route.","title":"BottomSheet"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-bottom-sheet/#constructors","text":"BottomSheet [androidJvm] fun < T : NavRoute> BottomSheet (route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit )","title":"Constructors"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-bottom-sheet/-bottom-sheet/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / BottomSheet / BottomSheet BottomSheet \u00b6 [androidJvm]\\ fun < T : NavRoute> BottomSheet (route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit )","title":" bottom sheet"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-bottom-sheet/-bottom-sheet/#bottomsheet","text":"[androidJvm]\\ fun < T : NavRoute> BottomSheet (route: KClass < T >, bottomSheetContent: @Composable( T ) -> Unit )","title":"BottomSheet"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-dialog/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / Dialog Dialog \u00b6 [androidJvm]\\ class Dialog < T : NavRoute>(route: KClass < T >, dialogContent: @Composable( T ) -> Unit ) : NavDestination Represents a dialog. The route will be used as a unique identifier together. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of route. Constructors \u00b6 Dialog [androidJvm] fun < T : NavRoute> Dialog (route: KClass < T >, dialogContent: @Composable( T ) -> Unit )","title":"Index"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-dialog/#dialog","text":"[androidJvm]\\ class Dialog < T : NavRoute>(route: KClass < T >, dialogContent: @Composable( T ) -> Unit ) : NavDestination Represents a dialog. The route will be used as a unique identifier together. The given dialogContent will be shown inside the dialog window when navigating to it by using an instance of route.","title":"Dialog"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-dialog/#constructors","text":"Dialog [androidJvm] fun < T : NavRoute> Dialog (route: KClass < T >, dialogContent: @Composable( T ) -> Unit )","title":"Constructors"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-dialog/-dialog/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / Dialog / Dialog Dialog \u00b6 [androidJvm]\\ fun < T : NavRoute> Dialog (route: KClass < T >, dialogContent: @Composable( T ) -> Unit )","title":" dialog"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-dialog/-dialog/#dialog","text":"[androidJvm]\\ fun < T : NavRoute> Dialog (route: KClass < T >, dialogContent: @Composable( T ) -> Unit )","title":"Dialog"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-screen/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / Screen Screen \u00b6 [androidJvm]\\ class Screen < T : BaseRoute>(route: KClass < T >, screenContent: @Composable( T ) -> Unit ) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of route. Constructors \u00b6 Screen [androidJvm] fun < T : BaseRoute> Screen (route: KClass < T >, screenContent: @Composable( T ) -> Unit )","title":"Index"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-screen/#screen","text":"[androidJvm]\\ class Screen < T : BaseRoute>(route: KClass < T >, screenContent: @Composable( T ) -> Unit ) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given screenContent will be shown when the screen is being navigated to using an instance of route.","title":"Screen"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-screen/#constructors","text":"Screen [androidJvm] fun < T : BaseRoute> Screen (route: KClass < T >, screenContent: @Composable( T ) -> Unit )","title":"Constructors"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-screen/-screen/","text":"// navigator-runtime-compose / com.freeletics.mad.navigator.compose / NavDestination / Screen / Screen Screen \u00b6 [androidJvm]\\ fun < T : BaseRoute> Screen (route: KClass < T >, screenContent: @Composable( T ) -> Unit )","title":" screen"},{"location":"Javadoc/navigator-compose/navigator-runtime-compose/com.freeletics.mad.navigator.compose/-nav-destination/-screen/-screen/#screen","text":"[androidJvm]\\ fun < T : BaseRoute> Screen (route: KClass < T >, screenContent: @Composable( T ) -> Unit )","title":"Screen"},{"location":"Javadoc/navigator-fragment/","text":"// navigator-runtime-fragment navigator-runtime-fragment \u00b6 Packages \u00b6 Name com.freeletics.mad.navigator.fragment","title":"Index"},{"location":"Javadoc/navigator-fragment/#navigator-runtime-fragment","text":"","title":"navigator-runtime-fragment"},{"location":"Javadoc/navigator-fragment/#packages","text":"Name com.freeletics.mad.navigator.fragment","title":"Packages"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment Package com.freeletics.mad.navigator.fragment \u00b6 Types \u00b6 Name Summary NavDestination [androidJvm] interface NavDestination A destination that can be navigated to. See setGraph for how to configure a NavGraph with it. Functions \u00b6 Name Summary ActivityDestination [androidJvm] inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation. DialogDestination [androidJvm] inline fun < T : NavRoute, F : DialogFragment > DialogDestination (): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T . handleNavigation [androidJvm] fun handleNavigation (fragment: Fragment , navigator: NavEventNavigator) Handles the NavEventNavigator events while the Fragment\u2019s lifecycle is at least started. requireRoute [androidJvm] fun < T : BaseRoute> Fragment . requireRoute (): T ScreenDestination [androidJvm] inline fun < T : BaseRoute, F : Fragment > ScreenDestination (): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T . setGraph [androidJvm] fun NavHostFragment . setGraph (startRoute: BaseRoute, destinations: Set < NavDestination >) Creates and sets a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph.","title":"Index"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/#package-comfreeleticsmadnavigatorfragment","text":"","title":"Package com.freeletics.mad.navigator.fragment"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/#types","text":"Name Summary NavDestination [androidJvm] interface NavDestination A destination that can be navigated to. See setGraph for how to configure a NavGraph with it.","title":"Types"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/#functions","text":"Name Summary ActivityDestination [androidJvm] inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation. DialogDestination [androidJvm] inline fun < T : NavRoute, F : DialogFragment > DialogDestination (): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T . handleNavigation [androidJvm] fun handleNavigation (fragment: Fragment , navigator: NavEventNavigator) Handles the NavEventNavigator events while the Fragment\u2019s lifecycle is at least started. requireRoute [androidJvm] fun < T : BaseRoute> Fragment . requireRoute (): T ScreenDestination [androidJvm] inline fun < T : BaseRoute, F : Fragment > ScreenDestination (): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T . setGraph [androidJvm] fun NavHostFragment . setGraph (startRoute: BaseRoute, destinations: Set < NavDestination >) Creates and sets a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph.","title":"Functions"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-activity-destination/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / ActivityDestination ActivityDestination \u00b6 [androidJvm]\\ inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation.","title":" activity destination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-activity-destination/#activitydestination","text":"[androidJvm]\\ inline fun < T : NavRoute> ActivityDestination (intent: Intent ): NavDestination Creates a new NavDestination that represents an Activity. The class of T will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of T for navigation.","title":"ActivityDestination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-dialog-destination/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / DialogDestination DialogDestination \u00b6 [androidJvm]\\ inline fun < T : NavRoute, F : DialogFragment > DialogDestination (): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T .","title":" dialog destination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-dialog-destination/#dialogdestination","text":"[androidJvm]\\ inline fun < T : NavRoute, F : DialogFragment > DialogDestination (): NavDestination Creates a new NavDestination that represents a dialog. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T .","title":"DialogDestination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-screen-destination/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / ScreenDestination ScreenDestination \u00b6 [androidJvm]\\ inline fun < T : BaseRoute, F : Fragment > ScreenDestination (): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T .","title":" screen destination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-screen-destination/#screendestination","text":"[androidJvm]\\ inline fun < T : BaseRoute, F : Fragment > ScreenDestination (): NavDestination Creates a new NavDestination that represents a full screen. The class of T will be used as a unique identifier. The given Fragment class F will be shown when the screen is being navigated to using an instance of T .","title":"ScreenDestination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/handle-navigation/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / handleNavigation handleNavigation \u00b6 [androidJvm]\\ fun handleNavigation (fragment: Fragment , navigator: NavEventNavigator) Handles the NavEventNavigator events while the Fragment\u2019s lifecycle is at least started.","title":"Handle navigation"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/handle-navigation/#handlenavigation","text":"[androidJvm]\\ fun handleNavigation (fragment: Fragment , navigator: NavEventNavigator) Handles the NavEventNavigator events while the Fragment\u2019s lifecycle is at least started.","title":"handleNavigation"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/require-route/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / requireRoute requireRoute \u00b6 [androidJvm]\\ fun < T : BaseRoute> Fragment . requireRoute (): T","title":"Require route"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/require-route/#requireroute","text":"[androidJvm]\\ fun < T : BaseRoute> Fragment . requireRoute (): T","title":"requireRoute"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/set-graph/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / setGraph setGraph \u00b6 [androidJvm]\\ fun NavHostFragment . setGraph (startRoute: BaseRoute, destinations: Set < NavDestination >) Creates and sets a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph.","title":"Set graph"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/set-graph/#setgraph","text":"[androidJvm]\\ fun NavHostFragment . setGraph (startRoute: BaseRoute, destinations: Set < NavDestination >) Creates and sets a androidx.navigation.NavGraph containing all given destinations . startRoute will be used as the start destination of the graph.","title":"setGraph"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination NavDestination \u00b6 [androidJvm]\\ interface NavDestination A destination that can be navigated to. See setGraph for how to configure a NavGraph with it. route will be used as a unique identifier. The destination can be reached by navigating using an instance of route. Types \u00b6 Name Summary Activity [androidJvm] class Activity < T : NavRoute>(route: KClass < T >, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation. Dialog [androidJvm] class Dialog < T : NavRoute>(route: KClass < T >, fragmentClass: KClass <out DialogFragment >) : NavDestination Represents a dialog. The route will be used as a unique identifier. The given fragmentClass will be shown when it\u2019s being navigated to using an instance of route. Screen [androidJvm] class Screen < T : BaseRoute>(route: KClass < T >, fragmentClass: KClass <out Fragment >) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given fragmentClass will be shown when the screen is being navigated to using an instance of route. Inheritors \u00b6 Name Screen Dialog Activity","title":"Index"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/#navdestination","text":"[androidJvm]\\ interface NavDestination A destination that can be navigated to. See setGraph for how to configure a NavGraph with it. route will be used as a unique identifier. The destination can be reached by navigating using an instance of route.","title":"NavDestination"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/#types","text":"Name Summary Activity [androidJvm] class Activity < T : NavRoute>(route: KClass < T >, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation. Dialog [androidJvm] class Dialog < T : NavRoute>(route: KClass < T >, fragmentClass: KClass <out DialogFragment >) : NavDestination Represents a dialog. The route will be used as a unique identifier. The given fragmentClass will be shown when it\u2019s being navigated to using an instance of route. Screen [androidJvm] class Screen < T : BaseRoute>(route: KClass < T >, fragmentClass: KClass <out Fragment >) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given fragmentClass will be shown when the screen is being navigated to using an instance of route.","title":"Types"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/#inheritors","text":"Name Screen Dialog Activity","title":"Inheritors"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-activity/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination / Activity Activity \u00b6 [androidJvm]\\ class Activity < T : NavRoute>(route: KClass < T >, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation. Constructors \u00b6 Activity [androidJvm] fun < T : NavRoute> Activity (route: KClass < T >, intent: Intent )","title":"Index"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-activity/#activity","text":"[androidJvm]\\ class Activity < T : NavRoute>(route: KClass < T >, intent: Intent ) : NavDestination Represents an Activity. The route will be used as a unique identifier. The given intent will be used to launch the Activity when using an instance of route for navigation.","title":"Activity"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-activity/#constructors","text":"Activity [androidJvm] fun < T : NavRoute> Activity (route: KClass < T >, intent: Intent )","title":"Constructors"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-activity/-activity/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination / Activity / Activity Activity \u00b6 [androidJvm]\\ fun < T : NavRoute> Activity (route: KClass < T >, intent: Intent )","title":" activity"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-activity/-activity/#activity","text":"[androidJvm]\\ fun < T : NavRoute> Activity (route: KClass < T >, intent: Intent )","title":"Activity"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-dialog/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination / Dialog Dialog \u00b6 [androidJvm]\\ class Dialog < T : NavRoute>(route: KClass < T >, fragmentClass: KClass <out DialogFragment >) : NavDestination Represents a dialog. The route will be used as a unique identifier. The given fragmentClass will be shown when it\u2019s being navigated to using an instance of route. Constructors \u00b6 Dialog [androidJvm] fun < T : NavRoute> Dialog (route: KClass < T >, fragmentClass: KClass <out DialogFragment >)","title":"Index"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-dialog/#dialog","text":"[androidJvm]\\ class Dialog < T : NavRoute>(route: KClass < T >, fragmentClass: KClass <out DialogFragment >) : NavDestination Represents a dialog. The route will be used as a unique identifier. The given fragmentClass will be shown when it\u2019s being navigated to using an instance of route.","title":"Dialog"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-dialog/#constructors","text":"Dialog [androidJvm] fun < T : NavRoute> Dialog (route: KClass < T >, fragmentClass: KClass <out DialogFragment >)","title":"Constructors"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-dialog/-dialog/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination / Dialog / Dialog Dialog \u00b6 [androidJvm]\\ fun < T : NavRoute> Dialog (route: KClass < T >, fragmentClass: KClass <out DialogFragment >)","title":" dialog"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-dialog/-dialog/#dialog","text":"[androidJvm]\\ fun < T : NavRoute> Dialog (route: KClass < T >, fragmentClass: KClass <out DialogFragment >)","title":"Dialog"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-screen/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination / Screen Screen \u00b6 [androidJvm]\\ class Screen < T : BaseRoute>(route: KClass < T >, fragmentClass: KClass <out Fragment >) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given fragmentClass will be shown when the screen is being navigated to using an instance of route. Constructors \u00b6 Screen [androidJvm] fun < T : BaseRoute> Screen (route: KClass < T >, fragmentClass: KClass <out Fragment >)","title":"Index"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-screen/#screen","text":"[androidJvm]\\ class Screen < T : BaseRoute>(route: KClass < T >, fragmentClass: KClass <out Fragment >) : NavDestination Represents a full screen. The route will be used as a unique identifier. The given fragmentClass will be shown when the screen is being navigated to using an instance of route.","title":"Screen"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-screen/#constructors","text":"Screen [androidJvm] fun < T : BaseRoute> Screen (route: KClass < T >, fragmentClass: KClass <out Fragment >)","title":"Constructors"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-screen/-screen/","text":"// navigator-runtime-fragment / com.freeletics.mad.navigator.fragment / NavDestination / Screen / Screen Screen \u00b6 [androidJvm]\\ fun < T : BaseRoute> Screen (route: KClass < T >, fragmentClass: KClass <out Fragment >)","title":" screen"},{"location":"Javadoc/navigator-fragment/navigator-runtime-fragment/com.freeletics.mad.navigator.fragment/-nav-destination/-screen/-screen/#screen","text":"[androidJvm]\\ fun < T : BaseRoute> Screen (route: KClass < T >, fragmentClass: KClass <out Fragment >)","title":"Screen"},{"location":"Javadoc/state-machine/","text":"// state-machine state-machine \u00b6 Packages \u00b6 Name com.freeletics.mad.statemachine","title":"Index"},{"location":"Javadoc/state-machine/#state-machine","text":"","title":"state-machine"},{"location":"Javadoc/state-machine/#packages","text":"Name com.freeletics.mad.statemachine","title":"Packages"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/","text":"// state-machine / com.freeletics.mad.statemachine Package com.freeletics.mad.statemachine \u00b6 Types \u00b6 Name Summary StateMachine [common] interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch .","title":"Index"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/#package-comfreeleticsmadstatemachine","text":"","title":"Package com.freeletics.mad.statemachine"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/#types","text":"Name Summary StateMachine [common] interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch .","title":"Types"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/","text":"// state-machine / com.freeletics.mad.statemachine / StateMachine StateMachine \u00b6 [common]\\ interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch . Functions \u00b6 Name Summary dispatch [common] abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects. Properties \u00b6 Name Summary state [common] abstract val state : Flow< State > A Flow that emits the current state as well as all changes to the state.","title":"Index"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/#statemachine","text":"[common]\\ interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch .","title":"StateMachine"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/#functions","text":"Name Summary dispatch [common] abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects.","title":"Functions"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/#properties","text":"Name Summary state [common] abstract val state : Flow< State > A Flow that emits the current state as well as all changes to the state.","title":"Properties"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/dispatch/","text":"// state-machine / com.freeletics.mad.statemachine / StateMachine / dispatch dispatch \u00b6 [common]\\ abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects.","title":"Dispatch"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/dispatch/#dispatch","text":"[common]\\ abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects.","title":"dispatch"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/state/","text":"// state-machine / com.freeletics.mad.statemachine / StateMachine / state state \u00b6 [common]\\ abstract val state : Flow< State > A Flow that emits the current state as well as all changes to the state.","title":"State"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/state/#state","text":"[common]\\ abstract val state : Flow< State > A Flow that emits the current state as well as all changes to the state.","title":"state"},{"location":"Javadoc/text-resource/","text":"// text-resource text-resource \u00b6 Packages \u00b6 Name com.freeletics.mad.text","title":"Index"},{"location":"Javadoc/text-resource/#text-resource","text":"","title":"text-resource"},{"location":"Javadoc/text-resource/#packages","text":"Name com.freeletics.mad.text","title":"Packages"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/","text":"// text-resource / com.freeletics.mad.text Package com.freeletics.mad.text \u00b6 Types \u00b6 Name Summary LoadingTextResource [androidJvm] object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic. TextResource [androidJvm] sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context . Functions \u00b6 Name Summary joinToTextResource [androidJvm] fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library. plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](-text-resource/index.md).[plus](plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](-text-resource/index.md)<br>Join this TextResource with a String into a combined TextResource. setText [androidJvm] fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text. toTextResource [androidJvm] fun String . toTextResource (): TextResource","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/#package-comfreeleticsmadtext","text":"","title":"Package com.freeletics.mad.text"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/#types","text":"Name Summary LoadingTextResource [androidJvm] object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic. TextResource [androidJvm] sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context .","title":"Types"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/#functions","text":"Name Summary joinToTextResource [androidJvm] fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library. plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](-text-resource/index.md).[plus](plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](-text-resource/index.md)<br>Join this TextResource with a String into a combined TextResource. setText [androidJvm] fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text. toTextResource [androidJvm] fun String . toTextResource (): TextResource","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/join-to-text-resource/","text":"// text-resource / com.freeletics.mad.text / joinToTextResource joinToTextResource \u00b6 [androidJvm]\\ fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library.","title":"Join to text resource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/join-to-text-resource/#jointotextresource","text":"[androidJvm]\\ fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library.","title":"joinToTextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/plus/","text":"// text-resource / com.freeletics.mad.text / plus plus \u00b6 [androidJvm]\\ operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined `TextResource. [androidJvm]\\ operator fun TextResource . plus (other: String ): TextResource Join this TextResource with a String into a combined `TextResource.","title":"Plus"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/plus/#plus","text":"[androidJvm]\\ operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined `TextResource. [androidJvm]\\ operator fun TextResource . plus (other: String ): TextResource Join this TextResource with a String into a combined `TextResource.","title":"plus"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/set-text/","text":"// text-resource / com.freeletics.mad.text / setText setText \u00b6 [androidJvm]\\ fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text.","title":"Set text"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/set-text/#settext","text":"[androidJvm]\\ fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text.","title":"setText"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/to-text-resource/","text":"// text-resource / com.freeletics.mad.text / toTextResource toTextResource \u00b6 [androidJvm]\\ fun String . toTextResource (): TextResource","title":"To text resource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/to-text-resource/#totextresource","text":"[androidJvm]\\ fun String . toTextResource (): TextResource","title":"toTextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/","text":"// text-resource / com.freeletics.mad.text / LoadingTextResource LoadingTextResource \u00b6 [androidJvm]\\ object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic. Functions \u00b6 Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable open override fun format (): Nothing [androidJvm] open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int )","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/#loadingtextresource","text":"[androidJvm]\\ object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic.","title":"LoadingTextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/#functions","text":"Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable open override fun format (): Nothing [androidJvm] open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int )","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/format/","text":"// text-resource / com.freeletics.mad.text / LoadingTextResource / format format \u00b6 [androidJvm]\\ open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable open override fun format (): Nothing","title":"Format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/format/#format","text":"[androidJvm]\\ open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable open override fun format (): Nothing","title":"format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/","text":"// text-resource / com.freeletics.mad.text / TextResource TextResource \u00b6 [androidJvm]\\ sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context . Use the various factory methods to create a new instance. Use format with an Android context to get the proper formatted text. Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable abstract fun format (): String [androidJvm] abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int ) Inheritors \u00b6 Name LoadingTextResource Extensions \u00b6 Name Summary plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](index.md).[plus](../plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](index.md)<br>Join this TextResource with a String into a combined TextResource.","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#textresource","text":"[androidJvm]\\ sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context . Use the various factory methods to create a new instance. Use format with an Android context to get the proper formatted text.","title":"TextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#functions","text":"Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable abstract fun format (): String [androidJvm] abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int )","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#inheritors","text":"Name LoadingTextResource","title":"Inheritors"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#extensions","text":"Name Summary plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](index.md).[plus](../plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](index.md)<br>Join this TextResource with a String into a combined TextResource.","title":"Extensions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/format/","text":"// text-resource / com.freeletics.mad.text / TextResource / format format \u00b6 [androidJvm]\\ abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable abstract fun format (): String","title":"Format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/format/#format","text":"[androidJvm]\\ abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable abstract fun format (): String","title":"format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary createWithQuantity [androidJvm] fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders. invoke [androidJvm] @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm] @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm] @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders. join [androidJvm] @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/#functions","text":"Name Summary createWithQuantity [androidJvm] fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders. invoke [androidJvm] @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm] @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm] @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders. join [androidJvm] @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/create-with-quantity/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion / createWithQuantity createWithQuantity \u00b6 [androidJvm]\\ fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders.","title":"Create with quantity"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/create-with-quantity/#createwithquantity","text":"[androidJvm]\\ fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders.","title":"createWithQuantity"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/invoke/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion / invoke invoke \u00b6 [androidJvm]\\ @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm]\\ @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm]\\ @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders.","title":"Invoke"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/invoke/#invoke","text":"[androidJvm]\\ @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm]\\ @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm]\\ @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders.","title":"invoke"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/join/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion / join join \u00b6 [androidJvm]\\ @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"Join"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/join/#join","text":"[androidJvm]\\ @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"join"}]}