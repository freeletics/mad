{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modern Android Development - The Freeletics Way \u00b6 At Freeletics use many of the Jetpack/AndroidX libraries but we don\u2019t always use them in the way they are advertised in Google\u2019s tutorials. This project show cases our own flavored version of Modern Android Development as well as some of our own utilities. This repository is a work in progress. More will be added over time. StateMachine \u00b6 StateMachine is a very simple interface to implement a StateMachine with the concept of emitting state through a StateFlow and receiving input actions to mutate that state. For an example on how to build such a state machine check out FlowRedux . To connect a StateMachine to a user interface you can look at Renderer for the Android View world. In compose the StateMachine can be observed using collectAsState() and actions can be dispatched to it by simply launching them from a CoroutineScope created with rememberCoroutineScope() . implementation 'com.freeletics.mad:state-machine:0.2.0' TextResource \u00b6 TextResource is a domain specific model to represent text. Abstracts text whether it a localized String sent by the backend, a simple Android string resource (with or without formatting args) or an Android plurals resource. This way business logic with text can be easily tested without requiring Context and running on a device. For more information about the motivation for this abstraction check out this blog post . implementation 'com.freeletics.mad:text-resource:0.2.0' License \u00b6 Copyright 2021 Freeletics GmbH. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Modern Android Development - The Freeletics Way"},{"location":"#modern-android-development-the-freeletics-way","text":"At Freeletics use many of the Jetpack/AndroidX libraries but we don\u2019t always use them in the way they are advertised in Google\u2019s tutorials. This project show cases our own flavored version of Modern Android Development as well as some of our own utilities. This repository is a work in progress. More will be added over time.","title":"Modern Android Development - The Freeletics Way"},{"location":"#statemachine","text":"StateMachine is a very simple interface to implement a StateMachine with the concept of emitting state through a StateFlow and receiving input actions to mutate that state. For an example on how to build such a state machine check out FlowRedux . To connect a StateMachine to a user interface you can look at Renderer for the Android View world. In compose the StateMachine can be observed using collectAsState() and actions can be dispatched to it by simply launching them from a CoroutineScope created with rememberCoroutineScope() . implementation 'com.freeletics.mad:state-machine:0.2.0'","title":"StateMachine"},{"location":"#textresource","text":"TextResource is a domain specific model to represent text. Abstracts text whether it a localized String sent by the backend, a simple Android string resource (with or without formatting args) or an Android plurals resource. This way business logic with text can be easily tested without requiring Context and running on a device. For more information about the motivation for this abstraction check out this blog post . implementation 'com.freeletics.mad:text-resource:0.2.0'","title":"TextResource"},{"location":"#license","text":"Copyright 2021 Freeletics GmbH. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"Javadoc/state-machine/","text":"// state-machine state-machine \u00b6 Packages \u00b6 Name com.freeletics.mad.statemachine","title":"Index"},{"location":"Javadoc/state-machine/#state-machine","text":"","title":"state-machine"},{"location":"Javadoc/state-machine/#packages","text":"Name com.freeletics.mad.statemachine","title":"Packages"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/","text":"// state-machine / com.freeletics.mad.statemachine Package com.freeletics.mad.statemachine \u00b6 Types \u00b6 Name Summary StateMachine [common] interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch .","title":"Index"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/#package-comfreeleticsmadstatemachine","text":"","title":"Package com.freeletics.mad.statemachine"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/#types","text":"Name Summary StateMachine [common] interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch .","title":"Types"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/","text":"// state-machine / com.freeletics.mad.statemachine / StateMachine StateMachine \u00b6 [common]\\ interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch . Functions \u00b6 Name Summary dispatch [common] abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects. Properties \u00b6 Name Summary state [common] abstract val state : StateFlow< State > A Flow that emits the current state as well as all changes to the state.","title":"Index"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/#statemachine","text":"[common]\\ interface StateMachine < State : Any , Action : Any > A state machine that emits State objects through the Flow returned by state . The state can be mutated through actions passed to dispatch .","title":"StateMachine"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/#functions","text":"Name Summary dispatch [common] abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects.","title":"Functions"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/#properties","text":"Name Summary state [common] abstract val state : StateFlow< State > A Flow that emits the current state as well as all changes to the state.","title":"Properties"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/dispatch/","text":"// state-machine / com.freeletics.mad.statemachine / StateMachine / dispatch dispatch \u00b6 [common]\\ abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects.","title":"Dispatch"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/dispatch/#dispatch","text":"[common]\\ abstract suspend fun dispatch (action: Action ) An an Action to the StateMachine . The implementation can mutate the State based on these actions or trigger side effects.","title":"dispatch"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/state/","text":"// state-machine / com.freeletics.mad.statemachine / StateMachine / state state \u00b6 [common]\\ abstract val state : StateFlow< State > A Flow that emits the current state as well as all changes to the state.","title":"State"},{"location":"Javadoc/state-machine/state-machine/com.freeletics.mad.statemachine/-state-machine/state/#state","text":"[common]\\ abstract val state : StateFlow< State > A Flow that emits the current state as well as all changes to the state.","title":"state"},{"location":"Javadoc/text-resource/","text":"// text-resource text-resource \u00b6 Packages \u00b6 Name com.freeletics.mad.text","title":"Index"},{"location":"Javadoc/text-resource/#text-resource","text":"","title":"text-resource"},{"location":"Javadoc/text-resource/#packages","text":"Name com.freeletics.mad.text","title":"Packages"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/","text":"// text-resource / com.freeletics.mad.text Package com.freeletics.mad.text \u00b6 Types \u00b6 Name Summary LoadingTextResource [androidJvm] object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic. TextResource [androidJvm] sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context . Functions \u00b6 Name Summary joinToTextResource [androidJvm] fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library. plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](-text-resource/index.md).[plus](plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](-text-resource/index.md)<br>Join this TextResource with a String into a combined TextResource. setText [androidJvm] fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text. toTextResource [androidJvm] fun String . toTextResource (): TextResource","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/#package-comfreeleticsmadtext","text":"","title":"Package com.freeletics.mad.text"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/#types","text":"Name Summary LoadingTextResource [androidJvm] object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic. TextResource [androidJvm] sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context .","title":"Types"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/#functions","text":"Name Summary joinToTextResource [androidJvm] fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library. plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](-text-resource/index.md).[plus](plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](-text-resource/index.md)<br>Join this TextResource with a String into a combined TextResource. setText [androidJvm] fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text. toTextResource [androidJvm] fun String . toTextResource (): TextResource","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/join-to-text-resource/","text":"// text-resource / com.freeletics.mad.text / joinToTextResource joinToTextResource \u00b6 [androidJvm]\\ fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library.","title":"Join to text resource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/join-to-text-resource/#jointotextresource","text":"[androidJvm]\\ fun < T > Iterable < T >. joinToTextResource (separator: String = \u201c, \u201c, transform: ( T ) -> TextResource ): TextResource An extension method to join TextResources mimicking the behavior of joinToString from the Kotlin Standard Library.","title":"joinToTextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/plus/","text":"// text-resource / com.freeletics.mad.text / plus plus \u00b6 [androidJvm]\\ operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined `TextResource. [androidJvm]\\ operator fun TextResource . plus (other: String ): TextResource Join this TextResource with a String into a combined `TextResource.","title":"Plus"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/plus/#plus","text":"[androidJvm]\\ operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined `TextResource. [androidJvm]\\ operator fun TextResource . plus (other: String ): TextResource Join this TextResource with a String into a combined `TextResource.","title":"plus"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/set-text/","text":"// text-resource / com.freeletics.mad.text / setText setText \u00b6 [androidJvm]\\ fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text.","title":"Set text"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/set-text/#settext","text":"[androidJvm]\\ fun TextView . setText (textResource: TextResource ?) Set the textResource as the TextView \u2018s text.","title":"setText"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/to-text-resource/","text":"// text-resource / com.freeletics.mad.text / toTextResource toTextResource \u00b6 [androidJvm]\\ fun String . toTextResource (): TextResource","title":"To text resource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/to-text-resource/#totextresource","text":"[androidJvm]\\ fun String . toTextResource (): TextResource","title":"toTextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/","text":"// text-resource / com.freeletics.mad.text / LoadingTextResource LoadingTextResource \u00b6 [androidJvm]\\ object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic. Functions \u00b6 Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable open override fun format (): Nothing [androidJvm] open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int )","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/#loadingtextresource","text":"[androidJvm]\\ object LoadingTextResource : TextResource A TextResource that represents not yet loaded text. This can not be formatted into a String and is meant as a marker to for example show a placeholder graphic.","title":"LoadingTextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/#functions","text":"Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable open override fun format (): Nothing [androidJvm] open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int )","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/format/","text":"// text-resource / com.freeletics.mad.text / LoadingTextResource / format format \u00b6 [androidJvm]\\ open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable open override fun format (): Nothing","title":"Format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-loading-text-resource/format/#format","text":"[androidJvm]\\ open override fun format (context: Context ): Nothing Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable open override fun format (): Nothing","title":"format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/","text":"// text-resource / com.freeletics.mad.text / TextResource TextResource \u00b6 [androidJvm]\\ sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context . Use the various factory methods to create a new instance. Use format with an Android context to get the proper formatted text. Types \u00b6 Name Summary Companion [androidJvm] object Companion Functions \u00b6 Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable abstract fun format (): String [androidJvm] abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int ) Inheritors \u00b6 Name LoadingTextResource Extensions \u00b6 Name Summary plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](index.md).[plus](../plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](index.md)<br>Join this TextResource with a String into a combined TextResource.","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#textresource","text":"[androidJvm]\\ sealed class TextResource : Parcelable A simple text representation that allows you to model text without the need of an Android Context . Use the various factory methods to create a new instance. Use format with an Android context to get the proper formatted text.","title":"TextResource"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#types","text":"Name Summary Companion [androidJvm] object Companion","title":"Types"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#functions","text":"Name Summary describeContents [androidJvm] abstract fun describeContents (): Int format [androidJvm] @Composable @ReadOnlyComposable abstract fun format (): String [androidJvm] abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. writeToParcel [androidJvm] abstract fun writeToParcel (p0: Parcel , p1: Int )","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#inheritors","text":"Name LoadingTextResource","title":"Inheritors"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/#extensions","text":"Name Summary plus [androidJvm] operator fun TextResource . plus (other: TextResource ): TextResource Join this TextResource with the other one into a combined TextResource.<br>[androidJvm]<br>operator fun [TextResource](index.md).[plus](../plus.md)(other: [String](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html)): [TextResource](index.md)<br>Join this TextResource with a String into a combined TextResource.","title":"Extensions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/format/","text":"// text-resource / com.freeletics.mad.text / TextResource / format format \u00b6 [androidJvm]\\ abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable abstract fun format (): String","title":"Format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/format/#format","text":"[androidJvm]\\ abstract fun format (context: Context ): String Returns the formatted String represented by this TextResource. [androidJvm]\\ @Composable @ReadOnlyComposable abstract fun format (): String","title":"format"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion Companion \u00b6 [androidJvm]\\ object Companion Functions \u00b6 Name Summary createWithQuantity [androidJvm] fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders. invoke [androidJvm] @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm] @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm] @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders. join [androidJvm] @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"Index"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/#companion","text":"[androidJvm]\\ object Companion","title":"Companion"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/#functions","text":"Name Summary createWithQuantity [androidJvm] fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders. invoke [androidJvm] @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm] @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm] @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders. join [androidJvm] @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"Functions"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/create-with-quantity/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion / createWithQuantity createWithQuantity \u00b6 [androidJvm]\\ fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders.","title":"Create with quantity"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/create-with-quantity/#createwithquantity","text":"[androidJvm]\\ fun createWithQuantity (@ PluralsRes id: Int , quantity: Int , vararg args: Any ): TextResource Create a TextResource for the given Android plurals resource id and the given quantity . The args will be when formatting the string to replace any placeholders.","title":"createWithQuantity"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/invoke/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion / invoke invoke \u00b6 [androidJvm]\\ @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm]\\ @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm]\\ @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders.","title":"Invoke"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/invoke/#invoke","text":"[androidJvm]\\ @ JvmName (name = \u201cfromString\u201d) operator fun invoke (text: String ): TextResource Create a TextResource for the given String . A common use case for this is a string sent by the backend that is already localized and formatted. [androidJvm]\\ @ JvmName (name = \u201cfromNullableString\u201d) operator fun invoke (text: String ?): TextResource ? Returns a TextResource for the given String or null if text was null. [androidJvm]\\ @ JvmName (name = \u201cfromStringResource\u201d) operator fun invoke (@ StringRes id: Int , vararg args: Any ): TextResource Create a TextResource for the given Android string resource id. The args will be when formatting the string to replace any placeholders.","title":"invoke"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/join/","text":"// text-resource / com.freeletics.mad.text / TextResource / Companion / join join \u00b6 [androidJvm]\\ @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"Join"},{"location":"Javadoc/text-resource/text-resource/com.freeletics.mad.text/-text-resource/-companion/join/#join","text":"[androidJvm]\\ @ JvmStatic @ JvmOverloads fun join (resources: List < TextResource >, separator: String = \u201c, \u201c): TextResource Join the given TextResources into one.","title":"join"}]}